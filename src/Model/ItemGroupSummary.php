<?php
/**
 * ItemGroupSummary
 *
 * PHP version 8.1
 *
 * @package  eBay\Buy\Browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Browse API
 *
 * The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image <a href=\"/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Method\" title=\"Experimental Method\" />(Experimental Method)</a>, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.
 *
 * The version of the OpenAPI document: v1.19.7
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eBay\Buy\Browse\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use eBay\Buy\Browse\ObjectSerializer;

/**
 * ItemGroupSummary Class Doc Comment
 *
 * @description The type that defines the fields for the details of each item in an item group. An item group is  an item that has various aspect differences, such as color, size, storage capacity, etc. When an item group is created, one of the item variations, such as the red shirt size L, is chosen as the \&quot;parent\&quot;. All the other items in the group are the children, such as the blue shirt size L, red shirt size M, etc. &lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt; Note: &lt;/b&gt; This container is returned only if the &lt;b&gt; item_id&lt;/b&gt; in the request is an item group (parent ID of an item with variations).&lt;/span&gt;
 * @package  eBay\Buy\Browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ItemGroupSummary implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ItemGroupSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'item_group_additional_images' => '\eBay\Buy\Browse\Model\Image[]',
        'item_group_href' => 'string',
        'item_group_id' => 'string',
        'item_group_image' => '\eBay\Buy\Browse\Model\Image',
        'item_group_title' => 'string',
        'item_group_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'item_group_additional_images' => null,
        'item_group_href' => null,
        'item_group_id' => null,
        'item_group_image' => null,
        'item_group_title' => null,
        'item_group_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'item_group_additional_images' => false,
        'item_group_href' => false,
        'item_group_id' => false,
        'item_group_image' => false,
        'item_group_title' => false,
        'item_group_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'item_group_additional_images' => 'itemGroupAdditionalImages',
        'item_group_href' => 'itemGroupHref',
        'item_group_id' => 'itemGroupId',
        'item_group_image' => 'itemGroupImage',
        'item_group_title' => 'itemGroupTitle',
        'item_group_type' => 'itemGroupType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'item_group_additional_images' => 'setItemGroupAdditionalImages',
        'item_group_href' => 'setItemGroupHref',
        'item_group_id' => 'setItemGroupId',
        'item_group_image' => 'setItemGroupImage',
        'item_group_title' => 'setItemGroupTitle',
        'item_group_type' => 'setItemGroupType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'item_group_additional_images' => 'getItemGroupAdditionalImages',
        'item_group_href' => 'getItemGroupHref',
        'item_group_id' => 'getItemGroupId',
        'item_group_image' => 'getItemGroupImage',
        'item_group_title' => 'getItemGroupTitle',
        'item_group_type' => 'getItemGroupType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('item_group_additional_images', $data ?? [], null);
        $this->setIfExists('item_group_href', $data ?? [], null);
        $this->setIfExists('item_group_id', $data ?? [], null);
        $this->setIfExists('item_group_image', $data ?? [], null);
        $this->setIfExists('item_group_title', $data ?? [], null);
        $this->setIfExists('item_group_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_group_additional_images
     *
     * @return \eBay\Buy\Browse\Model\Image[]|null
     */
    public function getItemGroupAdditionalImages(): ?array
    {
        return $this->container['item_group_additional_images'];
    }

    /**
     * Sets item_group_additional_images
     *
     * @param \eBay\Buy\Browse\Model\Image[]|null $item_group_additional_images An array of containers with the URLs for images that are in addition to the primary image of the item group.  The primary image is returned in the <b> itemGroupImage</b> field.
     *
     * @return $this
     */
    public function setItemGroupAdditionalImages(?array $item_group_additional_images): static
    {
        if (is_null($item_group_additional_images)) {
            throw new InvalidArgumentException('non-nullable item_group_additional_images cannot be null');
        }
        $this->container['item_group_additional_images'] = $item_group_additional_images;

        return $this;
    }

    /**
     * Gets item_group_href
     *
     * @return string|null
     */
    public function getItemGroupHref(): ?string
    {
        return $this->container['item_group_href'];
    }

    /**
     * Sets item_group_href
     *
     * @param string|null $item_group_href The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.
     *
     * @return $this
     */
    public function setItemGroupHref(?string $item_group_href): static
    {
        if (is_null($item_group_href)) {
            throw new InvalidArgumentException('non-nullable item_group_href cannot be null');
        }
        $this->container['item_group_href'] = $item_group_href;

        return $this;
    }

    /**
     * Gets item_group_id
     *
     * @return string|null
     */
    public function getItemGroupId(): ?string
    {
        return $this->container['item_group_id'];
    }

    /**
     * Sets item_group_id
     *
     * @param string|null $item_group_id The unique identifier for the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.
     *
     * @return $this
     */
    public function setItemGroupId(?string $item_group_id): static
    {
        if (is_null($item_group_id)) {
            throw new InvalidArgumentException('non-nullable item_group_id cannot be null');
        }
        $this->container['item_group_id'] = $item_group_id;

        return $this;
    }

    /**
     * Gets item_group_image
     *
     * @return \eBay\Buy\Browse\Model\Image|null
     */
    public function getItemGroupImage(): ?\eBay\Buy\Browse\Model\Image
    {
        return $this->container['item_group_image'];
    }

    /**
     * Sets item_group_image
     *
     * @param \eBay\Buy\Browse\Model\Image|null $item_group_image item_group_image
     *
     * @return $this
     */
    public function setItemGroupImage(?\eBay\Buy\Browse\Model\Image $item_group_image): static
    {
        if (is_null($item_group_image)) {
            throw new InvalidArgumentException('non-nullable item_group_image cannot be null');
        }
        $this->container['item_group_image'] = $item_group_image;

        return $this;
    }

    /**
     * Gets item_group_title
     *
     * @return string|null
     */
    public function getItemGroupTitle(): ?string
    {
        return $this->container['item_group_title'];
    }

    /**
     * Sets item_group_title
     *
     * @param string|null $item_group_title The title of the item that appears on the item group page. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.
     *
     * @return $this
     */
    public function setItemGroupTitle(?string $item_group_title): static
    {
        if (is_null($item_group_title)) {
            throw new InvalidArgumentException('non-nullable item_group_title cannot be null');
        }
        $this->container['item_group_title'] = $item_group_title;

        return $this;
    }

    /**
     * Gets item_group_type
     *
     * @return string|null
     */
    public function getItemGroupType(): ?string
    {
        return $this->container['item_group_type'];
    }

    /**
     * Sets item_group_type
     *
     * @param string|null $item_group_type An enumeration value that indicates the type of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:ItemGroupTypeEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setItemGroupType(?string $item_group_type): static
    {
        if (is_null($item_group_type)) {
            throw new InvalidArgumentException('non-nullable item_group_type cannot be null');
        }
        $this->container['item_group_type'] = $item_group_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


