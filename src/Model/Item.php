<?php

/**
 * Item
 *
 * PHP version 8.1
 *
 * @package  eBay\Buy\Browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Browse API
 *
 * The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.
 *
 * The version of the OpenAPI document: v1.20.3
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eBay\Buy\Browse\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use eBay\Buy\Browse\ObjectSerializer;

/**
 * Item Class Doc Comment
 *
 * @description The details of an item that can be purchased.
 * @package  eBay\Buy\Browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Item implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'additional_images' => '\eBay\Buy\Browse\Model\Image[]',
        'addon_services' => '\eBay\Buy\Browse\Model\AddonService[]',
        'adult_only' => 'bool',
        'age_group' => 'string',
        'authenticity_guarantee' => '\eBay\Buy\Browse\Model\AuthenticityGuaranteeProgram',
        'authenticity_verification' => '\eBay\Buy\Browse\Model\AuthenticityVerificationProgram',
        'available_coupons' => '\eBay\Buy\Browse\Model\AvailableCoupon[]',
        'bid_count' => 'int',
        'brand' => 'string',
        'buying_options' => 'string[]',
        'category_id' => 'string',
        'category_id_path' => 'string',
        'category_path' => 'string',
        'charity_terms' => '\eBay\Buy\Browse\Model\ItemCharityTerms',
        'color' => 'string',
        'condition' => 'string',
        'condition_description' => 'string',
        'condition_descriptors' => '\eBay\Buy\Browse\Model\ConditionDescriptor[]',
        'condition_id' => 'string',
        'current_bid_price' => '\eBay\Buy\Browse\Model\ConvertedAmount',
        'description' => 'string',
        'eco_participation_fee' => '\eBay\Buy\Browse\Model\ConvertedAmount',
        'eligible_for_inline_checkout' => 'bool',
        'enabled_for_guest_checkout' => 'bool',
        'energy_efficiency_class' => 'string',
        'epid' => 'string',
        'estimated_availabilities' => '\eBay\Buy\Browse\Model\EstimatedAvailability[]',
        'gender' => 'string',
        'gtin' => 'string',
        'hazardous_materials_labels' => '\eBay\Buy\Browse\Model\HazardousMaterialsLabels',
        'image' => '\eBay\Buy\Browse\Model\Image',
        'immediate_pay' => 'bool',
        'inferred_epid' => 'string',
        'item_affiliate_web_url' => 'string',
        'item_creation_date' => 'string',
        'item_end_date' => 'string',
        'item_id' => 'string',
        'item_location' => '\eBay\Buy\Browse\Model\Address',
        'item_web_url' => 'string',
        'legacy_item_id' => 'string',
        'listing_marketplace_id' => 'string',
        'localized_aspects' => '\eBay\Buy\Browse\Model\TypedNameValue[]',
        'lot_size' => 'int',
        'manufacturer' => '\eBay\Buy\Browse\Model\CompanyAddress',
        'marketing_price' => '\eBay\Buy\Browse\Model\MarketingPrice',
        'material' => 'string',
        'minimum_price_to_bid' => '\eBay\Buy\Browse\Model\ConvertedAmount',
        'mpn' => 'string',
        'pattern' => 'string',
        'payment_methods' => '\eBay\Buy\Browse\Model\PaymentMethod[]',
        'price' => '\eBay\Buy\Browse\Model\ConvertedAmount',
        'price_display_condition' => 'string',
        'primary_item_group' => '\eBay\Buy\Browse\Model\ItemGroupSummary',
        'primary_product_review_rating' => '\eBay\Buy\Browse\Model\ReviewRating',
        'priority_listing' => 'bool',
        'product' => '\eBay\Buy\Browse\Model\Product',
        'product_fiche_web_url' => 'string',
        'product_safety_labels' => '\eBay\Buy\Browse\Model\ProductSafetyLabels',
        'qualified_programs' => 'string[]',
        'quantity_limit_per_buyer' => 'int',
        'repair_score' => 'string',
        'reserve_price_met' => 'bool',
        'responsible_persons' => '\eBay\Buy\Browse\Model\ResponsiblePerson[]',
        'return_terms' => '\eBay\Buy\Browse\Model\ItemReturnTerms',
        'seller' => '\eBay\Buy\Browse\Model\SellerDetail',
        'seller_custom_policies' => '\eBay\Buy\Browse\Model\SellerCustomPolicy[]',
        'seller_item_revision' => 'string',
        'shipping_options' => '\eBay\Buy\Browse\Model\ShippingOption[]',
        'ship_to_locations' => '\eBay\Buy\Browse\Model\ShipToLocations',
        'short_description' => 'string',
        'size' => 'string',
        'size_system' => 'string',
        'size_type' => 'string',
        'subtitle' => 'string',
        'taxes' => '\eBay\Buy\Browse\Model\Taxes[]',
        'title' => 'string',
        'top_rated_buying_experience' => 'bool',
        'tyre_label_image_url' => 'string',
        'unique_bidder_count' => 'int',
        'unit_price' => '\eBay\Buy\Browse\Model\ConvertedAmount',
        'unit_pricing_measure' => 'string',
        'warnings' => '\eBay\Buy\Browse\Model\Error[]',
        'watch_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'additional_images' => null,
        'addon_services' => null,
        'adult_only' => null,
        'age_group' => null,
        'authenticity_guarantee' => null,
        'authenticity_verification' => null,
        'available_coupons' => null,
        'bid_count' => 'int32',
        'brand' => null,
        'buying_options' => null,
        'category_id' => null,
        'category_id_path' => null,
        'category_path' => null,
        'charity_terms' => null,
        'color' => null,
        'condition' => null,
        'condition_description' => null,
        'condition_descriptors' => null,
        'condition_id' => null,
        'current_bid_price' => null,
        'description' => null,
        'eco_participation_fee' => null,
        'eligible_for_inline_checkout' => null,
        'enabled_for_guest_checkout' => null,
        'energy_efficiency_class' => null,
        'epid' => null,
        'estimated_availabilities' => null,
        'gender' => null,
        'gtin' => null,
        'hazardous_materials_labels' => null,
        'image' => null,
        'immediate_pay' => null,
        'inferred_epid' => null,
        'item_affiliate_web_url' => null,
        'item_creation_date' => null,
        'item_end_date' => null,
        'item_id' => null,
        'item_location' => null,
        'item_web_url' => null,
        'legacy_item_id' => null,
        'listing_marketplace_id' => null,
        'localized_aspects' => null,
        'lot_size' => 'int32',
        'manufacturer' => null,
        'marketing_price' => null,
        'material' => null,
        'minimum_price_to_bid' => null,
        'mpn' => null,
        'pattern' => null,
        'payment_methods' => null,
        'price' => null,
        'price_display_condition' => null,
        'primary_item_group' => null,
        'primary_product_review_rating' => null,
        'priority_listing' => null,
        'product' => null,
        'product_fiche_web_url' => null,
        'product_safety_labels' => null,
        'qualified_programs' => null,
        'quantity_limit_per_buyer' => 'int32',
        'repair_score' => null,
        'reserve_price_met' => null,
        'responsible_persons' => null,
        'return_terms' => null,
        'seller' => null,
        'seller_custom_policies' => null,
        'seller_item_revision' => null,
        'shipping_options' => null,
        'ship_to_locations' => null,
        'short_description' => null,
        'size' => null,
        'size_system' => null,
        'size_type' => null,
        'subtitle' => null,
        'taxes' => null,
        'title' => null,
        'top_rated_buying_experience' => null,
        'tyre_label_image_url' => null,
        'unique_bidder_count' => 'int32',
        'unit_price' => null,
        'unit_pricing_measure' => null,
        'warnings' => null,
        'watch_count' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'additional_images' => false,
        'addon_services' => false,
        'adult_only' => false,
        'age_group' => false,
        'authenticity_guarantee' => false,
        'authenticity_verification' => false,
        'available_coupons' => false,
        'bid_count' => false,
        'brand' => false,
        'buying_options' => false,
        'category_id' => false,
        'category_id_path' => false,
        'category_path' => false,
        'charity_terms' => false,
        'color' => false,
        'condition' => false,
        'condition_description' => false,
        'condition_descriptors' => false,
        'condition_id' => false,
        'current_bid_price' => false,
        'description' => false,
        'eco_participation_fee' => false,
        'eligible_for_inline_checkout' => false,
        'enabled_for_guest_checkout' => false,
        'energy_efficiency_class' => false,
        'epid' => false,
        'estimated_availabilities' => false,
        'gender' => false,
        'gtin' => false,
        'hazardous_materials_labels' => false,
        'image' => false,
        'immediate_pay' => false,
        'inferred_epid' => false,
        'item_affiliate_web_url' => false,
        'item_creation_date' => false,
        'item_end_date' => false,
        'item_id' => false,
        'item_location' => false,
        'item_web_url' => false,
        'legacy_item_id' => false,
        'listing_marketplace_id' => false,
        'localized_aspects' => false,
        'lot_size' => false,
        'manufacturer' => false,
        'marketing_price' => false,
        'material' => false,
        'minimum_price_to_bid' => false,
        'mpn' => false,
        'pattern' => false,
        'payment_methods' => false,
        'price' => false,
        'price_display_condition' => false,
        'primary_item_group' => false,
        'primary_product_review_rating' => false,
        'priority_listing' => false,
        'product' => false,
        'product_fiche_web_url' => false,
        'product_safety_labels' => false,
        'qualified_programs' => false,
        'quantity_limit_per_buyer' => false,
        'repair_score' => false,
        'reserve_price_met' => false,
        'responsible_persons' => false,
        'return_terms' => false,
        'seller' => false,
        'seller_custom_policies' => false,
        'seller_item_revision' => false,
        'shipping_options' => false,
        'ship_to_locations' => false,
        'short_description' => false,
        'size' => false,
        'size_system' => false,
        'size_type' => false,
        'subtitle' => false,
        'taxes' => false,
        'title' => false,
        'top_rated_buying_experience' => false,
        'tyre_label_image_url' => false,
        'unique_bidder_count' => false,
        'unit_price' => false,
        'unit_pricing_measure' => false,
        'warnings' => false,
        'watch_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'additional_images' => 'additionalImages',
        'addon_services' => 'addonServices',
        'adult_only' => 'adultOnly',
        'age_group' => 'ageGroup',
        'authenticity_guarantee' => 'authenticityGuarantee',
        'authenticity_verification' => 'authenticityVerification',
        'available_coupons' => 'availableCoupons',
        'bid_count' => 'bidCount',
        'brand' => 'brand',
        'buying_options' => 'buyingOptions',
        'category_id' => 'categoryId',
        'category_id_path' => 'categoryIdPath',
        'category_path' => 'categoryPath',
        'charity_terms' => 'charityTerms',
        'color' => 'color',
        'condition' => 'condition',
        'condition_description' => 'conditionDescription',
        'condition_descriptors' => 'conditionDescriptors',
        'condition_id' => 'conditionId',
        'current_bid_price' => 'currentBidPrice',
        'description' => 'description',
        'eco_participation_fee' => 'ecoParticipationFee',
        'eligible_for_inline_checkout' => 'eligibleForInlineCheckout',
        'enabled_for_guest_checkout' => 'enabledForGuestCheckout',
        'energy_efficiency_class' => 'energyEfficiencyClass',
        'epid' => 'epid',
        'estimated_availabilities' => 'estimatedAvailabilities',
        'gender' => 'gender',
        'gtin' => 'gtin',
        'hazardous_materials_labels' => 'hazardousMaterialsLabels',
        'image' => 'image',
        'immediate_pay' => 'immediatePay',
        'inferred_epid' => 'inferredEpid',
        'item_affiliate_web_url' => 'itemAffiliateWebUrl',
        'item_creation_date' => 'itemCreationDate',
        'item_end_date' => 'itemEndDate',
        'item_id' => 'itemId',
        'item_location' => 'itemLocation',
        'item_web_url' => 'itemWebUrl',
        'legacy_item_id' => 'legacyItemId',
        'listing_marketplace_id' => 'listingMarketplaceId',
        'localized_aspects' => 'localizedAspects',
        'lot_size' => 'lotSize',
        'manufacturer' => 'manufacturer',
        'marketing_price' => 'marketingPrice',
        'material' => 'material',
        'minimum_price_to_bid' => 'minimumPriceToBid',
        'mpn' => 'mpn',
        'pattern' => 'pattern',
        'payment_methods' => 'paymentMethods',
        'price' => 'price',
        'price_display_condition' => 'priceDisplayCondition',
        'primary_item_group' => 'primaryItemGroup',
        'primary_product_review_rating' => 'primaryProductReviewRating',
        'priority_listing' => 'priorityListing',
        'product' => 'product',
        'product_fiche_web_url' => 'productFicheWebUrl',
        'product_safety_labels' => 'productSafetyLabels',
        'qualified_programs' => 'qualifiedPrograms',
        'quantity_limit_per_buyer' => 'quantityLimitPerBuyer',
        'repair_score' => 'repairScore',
        'reserve_price_met' => 'reservePriceMet',
        'responsible_persons' => 'responsiblePersons',
        'return_terms' => 'returnTerms',
        'seller' => 'seller',
        'seller_custom_policies' => 'sellerCustomPolicies',
        'seller_item_revision' => 'sellerItemRevision',
        'shipping_options' => 'shippingOptions',
        'ship_to_locations' => 'shipToLocations',
        'short_description' => 'shortDescription',
        'size' => 'size',
        'size_system' => 'sizeSystem',
        'size_type' => 'sizeType',
        'subtitle' => 'subtitle',
        'taxes' => 'taxes',
        'title' => 'title',
        'top_rated_buying_experience' => 'topRatedBuyingExperience',
        'tyre_label_image_url' => 'tyreLabelImageUrl',
        'unique_bidder_count' => 'uniqueBidderCount',
        'unit_price' => 'unitPrice',
        'unit_pricing_measure' => 'unitPricingMeasure',
        'warnings' => 'warnings',
        'watch_count' => 'watchCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'additional_images' => 'setAdditionalImages',
        'addon_services' => 'setAddonServices',
        'adult_only' => 'setAdultOnly',
        'age_group' => 'setAgeGroup',
        'authenticity_guarantee' => 'setAuthenticityGuarantee',
        'authenticity_verification' => 'setAuthenticityVerification',
        'available_coupons' => 'setAvailableCoupons',
        'bid_count' => 'setBidCount',
        'brand' => 'setBrand',
        'buying_options' => 'setBuyingOptions',
        'category_id' => 'setCategoryId',
        'category_id_path' => 'setCategoryIdPath',
        'category_path' => 'setCategoryPath',
        'charity_terms' => 'setCharityTerms',
        'color' => 'setColor',
        'condition' => 'setCondition',
        'condition_description' => 'setConditionDescription',
        'condition_descriptors' => 'setConditionDescriptors',
        'condition_id' => 'setConditionId',
        'current_bid_price' => 'setCurrentBidPrice',
        'description' => 'setDescription',
        'eco_participation_fee' => 'setEcoParticipationFee',
        'eligible_for_inline_checkout' => 'setEligibleForInlineCheckout',
        'enabled_for_guest_checkout' => 'setEnabledForGuestCheckout',
        'energy_efficiency_class' => 'setEnergyEfficiencyClass',
        'epid' => 'setEpid',
        'estimated_availabilities' => 'setEstimatedAvailabilities',
        'gender' => 'setGender',
        'gtin' => 'setGtin',
        'hazardous_materials_labels' => 'setHazardousMaterialsLabels',
        'image' => 'setImage',
        'immediate_pay' => 'setImmediatePay',
        'inferred_epid' => 'setInferredEpid',
        'item_affiliate_web_url' => 'setItemAffiliateWebUrl',
        'item_creation_date' => 'setItemCreationDate',
        'item_end_date' => 'setItemEndDate',
        'item_id' => 'setItemId',
        'item_location' => 'setItemLocation',
        'item_web_url' => 'setItemWebUrl',
        'legacy_item_id' => 'setLegacyItemId',
        'listing_marketplace_id' => 'setListingMarketplaceId',
        'localized_aspects' => 'setLocalizedAspects',
        'lot_size' => 'setLotSize',
        'manufacturer' => 'setManufacturer',
        'marketing_price' => 'setMarketingPrice',
        'material' => 'setMaterial',
        'minimum_price_to_bid' => 'setMinimumPriceToBid',
        'mpn' => 'setMpn',
        'pattern' => 'setPattern',
        'payment_methods' => 'setPaymentMethods',
        'price' => 'setPrice',
        'price_display_condition' => 'setPriceDisplayCondition',
        'primary_item_group' => 'setPrimaryItemGroup',
        'primary_product_review_rating' => 'setPrimaryProductReviewRating',
        'priority_listing' => 'setPriorityListing',
        'product' => 'setProduct',
        'product_fiche_web_url' => 'setProductFicheWebUrl',
        'product_safety_labels' => 'setProductSafetyLabels',
        'qualified_programs' => 'setQualifiedPrograms',
        'quantity_limit_per_buyer' => 'setQuantityLimitPerBuyer',
        'repair_score' => 'setRepairScore',
        'reserve_price_met' => 'setReservePriceMet',
        'responsible_persons' => 'setResponsiblePersons',
        'return_terms' => 'setReturnTerms',
        'seller' => 'setSeller',
        'seller_custom_policies' => 'setSellerCustomPolicies',
        'seller_item_revision' => 'setSellerItemRevision',
        'shipping_options' => 'setShippingOptions',
        'ship_to_locations' => 'setShipToLocations',
        'short_description' => 'setShortDescription',
        'size' => 'setSize',
        'size_system' => 'setSizeSystem',
        'size_type' => 'setSizeType',
        'subtitle' => 'setSubtitle',
        'taxes' => 'setTaxes',
        'title' => 'setTitle',
        'top_rated_buying_experience' => 'setTopRatedBuyingExperience',
        'tyre_label_image_url' => 'setTyreLabelImageUrl',
        'unique_bidder_count' => 'setUniqueBidderCount',
        'unit_price' => 'setUnitPrice',
        'unit_pricing_measure' => 'setUnitPricingMeasure',
        'warnings' => 'setWarnings',
        'watch_count' => 'setWatchCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'additional_images' => 'getAdditionalImages',
        'addon_services' => 'getAddonServices',
        'adult_only' => 'getAdultOnly',
        'age_group' => 'getAgeGroup',
        'authenticity_guarantee' => 'getAuthenticityGuarantee',
        'authenticity_verification' => 'getAuthenticityVerification',
        'available_coupons' => 'getAvailableCoupons',
        'bid_count' => 'getBidCount',
        'brand' => 'getBrand',
        'buying_options' => 'getBuyingOptions',
        'category_id' => 'getCategoryId',
        'category_id_path' => 'getCategoryIdPath',
        'category_path' => 'getCategoryPath',
        'charity_terms' => 'getCharityTerms',
        'color' => 'getColor',
        'condition' => 'getCondition',
        'condition_description' => 'getConditionDescription',
        'condition_descriptors' => 'getConditionDescriptors',
        'condition_id' => 'getConditionId',
        'current_bid_price' => 'getCurrentBidPrice',
        'description' => 'getDescription',
        'eco_participation_fee' => 'getEcoParticipationFee',
        'eligible_for_inline_checkout' => 'getEligibleForInlineCheckout',
        'enabled_for_guest_checkout' => 'getEnabledForGuestCheckout',
        'energy_efficiency_class' => 'getEnergyEfficiencyClass',
        'epid' => 'getEpid',
        'estimated_availabilities' => 'getEstimatedAvailabilities',
        'gender' => 'getGender',
        'gtin' => 'getGtin',
        'hazardous_materials_labels' => 'getHazardousMaterialsLabels',
        'image' => 'getImage',
        'immediate_pay' => 'getImmediatePay',
        'inferred_epid' => 'getInferredEpid',
        'item_affiliate_web_url' => 'getItemAffiliateWebUrl',
        'item_creation_date' => 'getItemCreationDate',
        'item_end_date' => 'getItemEndDate',
        'item_id' => 'getItemId',
        'item_location' => 'getItemLocation',
        'item_web_url' => 'getItemWebUrl',
        'legacy_item_id' => 'getLegacyItemId',
        'listing_marketplace_id' => 'getListingMarketplaceId',
        'localized_aspects' => 'getLocalizedAspects',
        'lot_size' => 'getLotSize',
        'manufacturer' => 'getManufacturer',
        'marketing_price' => 'getMarketingPrice',
        'material' => 'getMaterial',
        'minimum_price_to_bid' => 'getMinimumPriceToBid',
        'mpn' => 'getMpn',
        'pattern' => 'getPattern',
        'payment_methods' => 'getPaymentMethods',
        'price' => 'getPrice',
        'price_display_condition' => 'getPriceDisplayCondition',
        'primary_item_group' => 'getPrimaryItemGroup',
        'primary_product_review_rating' => 'getPrimaryProductReviewRating',
        'priority_listing' => 'getPriorityListing',
        'product' => 'getProduct',
        'product_fiche_web_url' => 'getProductFicheWebUrl',
        'product_safety_labels' => 'getProductSafetyLabels',
        'qualified_programs' => 'getQualifiedPrograms',
        'quantity_limit_per_buyer' => 'getQuantityLimitPerBuyer',
        'repair_score' => 'getRepairScore',
        'reserve_price_met' => 'getReservePriceMet',
        'responsible_persons' => 'getResponsiblePersons',
        'return_terms' => 'getReturnTerms',
        'seller' => 'getSeller',
        'seller_custom_policies' => 'getSellerCustomPolicies',
        'seller_item_revision' => 'getSellerItemRevision',
        'shipping_options' => 'getShippingOptions',
        'ship_to_locations' => 'getShipToLocations',
        'short_description' => 'getShortDescription',
        'size' => 'getSize',
        'size_system' => 'getSizeSystem',
        'size_type' => 'getSizeType',
        'subtitle' => 'getSubtitle',
        'taxes' => 'getTaxes',
        'title' => 'getTitle',
        'top_rated_buying_experience' => 'getTopRatedBuyingExperience',
        'tyre_label_image_url' => 'getTyreLabelImageUrl',
        'unique_bidder_count' => 'getUniqueBidderCount',
        'unit_price' => 'getUnitPrice',
        'unit_pricing_measure' => 'getUnitPricingMeasure',
        'warnings' => 'getWarnings',
        'watch_count' => 'getWatchCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('additional_images', $data ?? [], null);
        $this->setIfExists('addon_services', $data ?? [], null);
        $this->setIfExists('adult_only', $data ?? [], null);
        $this->setIfExists('age_group', $data ?? [], null);
        $this->setIfExists('authenticity_guarantee', $data ?? [], null);
        $this->setIfExists('authenticity_verification', $data ?? [], null);
        $this->setIfExists('available_coupons', $data ?? [], null);
        $this->setIfExists('bid_count', $data ?? [], null);
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('buying_options', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('category_id_path', $data ?? [], null);
        $this->setIfExists('category_path', $data ?? [], null);
        $this->setIfExists('charity_terms', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('condition', $data ?? [], null);
        $this->setIfExists('condition_description', $data ?? [], null);
        $this->setIfExists('condition_descriptors', $data ?? [], null);
        $this->setIfExists('condition_id', $data ?? [], null);
        $this->setIfExists('current_bid_price', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('eco_participation_fee', $data ?? [], null);
        $this->setIfExists('eligible_for_inline_checkout', $data ?? [], null);
        $this->setIfExists('enabled_for_guest_checkout', $data ?? [], null);
        $this->setIfExists('energy_efficiency_class', $data ?? [], null);
        $this->setIfExists('epid', $data ?? [], null);
        $this->setIfExists('estimated_availabilities', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('gtin', $data ?? [], null);
        $this->setIfExists('hazardous_materials_labels', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('immediate_pay', $data ?? [], null);
        $this->setIfExists('inferred_epid', $data ?? [], null);
        $this->setIfExists('item_affiliate_web_url', $data ?? [], null);
        $this->setIfExists('item_creation_date', $data ?? [], null);
        $this->setIfExists('item_end_date', $data ?? [], null);
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('item_location', $data ?? [], null);
        $this->setIfExists('item_web_url', $data ?? [], null);
        $this->setIfExists('legacy_item_id', $data ?? [], null);
        $this->setIfExists('listing_marketplace_id', $data ?? [], null);
        $this->setIfExists('localized_aspects', $data ?? [], null);
        $this->setIfExists('lot_size', $data ?? [], null);
        $this->setIfExists('manufacturer', $data ?? [], null);
        $this->setIfExists('marketing_price', $data ?? [], null);
        $this->setIfExists('material', $data ?? [], null);
        $this->setIfExists('minimum_price_to_bid', $data ?? [], null);
        $this->setIfExists('mpn', $data ?? [], null);
        $this->setIfExists('pattern', $data ?? [], null);
        $this->setIfExists('payment_methods', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('price_display_condition', $data ?? [], null);
        $this->setIfExists('primary_item_group', $data ?? [], null);
        $this->setIfExists('primary_product_review_rating', $data ?? [], null);
        $this->setIfExists('priority_listing', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('product_fiche_web_url', $data ?? [], null);
        $this->setIfExists('product_safety_labels', $data ?? [], null);
        $this->setIfExists('qualified_programs', $data ?? [], null);
        $this->setIfExists('quantity_limit_per_buyer', $data ?? [], null);
        $this->setIfExists('repair_score', $data ?? [], null);
        $this->setIfExists('reserve_price_met', $data ?? [], null);
        $this->setIfExists('responsible_persons', $data ?? [], null);
        $this->setIfExists('return_terms', $data ?? [], null);
        $this->setIfExists('seller', $data ?? [], null);
        $this->setIfExists('seller_custom_policies', $data ?? [], null);
        $this->setIfExists('seller_item_revision', $data ?? [], null);
        $this->setIfExists('shipping_options', $data ?? [], null);
        $this->setIfExists('ship_to_locations', $data ?? [], null);
        $this->setIfExists('short_description', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('size_system', $data ?? [], null);
        $this->setIfExists('size_type', $data ?? [], null);
        $this->setIfExists('subtitle', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('top_rated_buying_experience', $data ?? [], null);
        $this->setIfExists('tyre_label_image_url', $data ?? [], null);
        $this->setIfExists('unique_bidder_count', $data ?? [], null);
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('unit_pricing_measure', $data ?? [], null);
        $this->setIfExists('warnings', $data ?? [], null);
        $this->setIfExists('watch_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_images
     *
     * @return \eBay\Buy\Browse\Model\Image[]|null
     */
    public function getAdditionalImages(): ?array
    {
        return $this->container['additional_images'];
    }

    /**
     * Sets additional_images
     *
     * @param \eBay\Buy\Browse\Model\Image[]|null $additional_images An array of containers with the URLs for the images that are in addition to the primary image.  The primary image is returned in the <b> image.imageUrl</b> field.
     *
     * @return $this
     */
    public function setAdditionalImages(?array $additional_images): static
    {
        if (is_null($additional_images)) {
            throw new InvalidArgumentException('non-nullable additional_images cannot be null');
        }
        $this->container['additional_images'] = $additional_images;

        return $this;
    }

    /**
     * Gets addon_services
     *
     * @return \eBay\Buy\Browse\Model\AddonService[]|null
     */
    public function getAddonServices(): ?array
    {
        return $this->container['addon_services'];
    }

    /**
     * Sets addon_services
     *
     * @param \eBay\Buy\Browse\Model\AddonService[]|null $addon_services A list of add-on services that may be selected for the item or that may apply automatically.
     *
     * @return $this
     */
    public function setAddonServices(?array $addon_services): static
    {
        if (is_null($addon_services)) {
            throw new InvalidArgumentException('non-nullable addon_services cannot be null');
        }
        $this->container['addon_services'] = $addon_services;

        return $this;
    }

    /**
     * Gets adult_only
     *
     * @return bool|null
     */
    public function getAdultOnly(): ?bool
    {
        return $this->container['adult_only'];
    }

    /**
     * Sets adult_only
     *
     * @param bool|null $adult_only This indicates if the item is for  adults only. For more information about adult-only items on eBay, see <a href=\"https://pages.ebay.com/help/policies/adult-only.html \" target=\"_blank\">Adult items policy</a> for sellers and <a href=\"https://www.ebay.com/help/terms-conditions/default/searching-adult-items?id=4661\" target=\"_blank\">Adult-Only items on eBay</a> for buyers.
     *
     * @return $this
     */
    public function setAdultOnly(?bool $adult_only): static
    {
        if (is_null($adult_only)) {
            throw new InvalidArgumentException('non-nullable adult_only cannot be null');
        }
        $this->container['adult_only'] = $adult_only;

        return $this;
    }

    /**
     * Gets age_group
     *
     * @return string|null
     */
    public function getAgeGroup(): ?string
    {
        return $this->container['age_group'];
    }

    /**
     * Sets age_group
     *
     * @param string|null $age_group (Primary Item Aspect) The age group for which the product is recommended. For example, newborn, infant, toddler, kids, adult, etc. All the item aspects, including this aspect, are returned in the <b> localizedAspects</b> container.
     *
     * @return $this
     */
    public function setAgeGroup(?string $age_group): static
    {
        if (is_null($age_group)) {
            throw new InvalidArgumentException('non-nullable age_group cannot be null');
        }
        $this->container['age_group'] = $age_group;

        return $this;
    }

    /**
     * Gets authenticity_guarantee
     *
     * @return \eBay\Buy\Browse\Model\AuthenticityGuaranteeProgram|null
     */
    public function getAuthenticityGuarantee(): ?\eBay\Buy\Browse\Model\AuthenticityGuaranteeProgram
    {
        return $this->container['authenticity_guarantee'];
    }

    /**
     * Sets authenticity_guarantee
     *
     * @param \eBay\Buy\Browse\Model\AuthenticityGuaranteeProgram|null $authenticity_guarantee authenticity_guarantee
     *
     * @return $this
     */
    public function setAuthenticityGuarantee(?\eBay\Buy\Browse\Model\AuthenticityGuaranteeProgram $authenticity_guarantee): static
    {
        if (is_null($authenticity_guarantee)) {
            throw new InvalidArgumentException('non-nullable authenticity_guarantee cannot be null');
        }
        $this->container['authenticity_guarantee'] = $authenticity_guarantee;

        return $this;
    }

    /**
     * Gets authenticity_verification
     *
     * @return \eBay\Buy\Browse\Model\AuthenticityVerificationProgram|null
     */
    public function getAuthenticityVerification(): ?\eBay\Buy\Browse\Model\AuthenticityVerificationProgram
    {
        return $this->container['authenticity_verification'];
    }

    /**
     * Sets authenticity_verification
     *
     * @param \eBay\Buy\Browse\Model\AuthenticityVerificationProgram|null $authenticity_verification authenticity_verification
     *
     * @return $this
     */
    public function setAuthenticityVerification(?\eBay\Buy\Browse\Model\AuthenticityVerificationProgram $authenticity_verification): static
    {
        if (is_null($authenticity_verification)) {
            throw new InvalidArgumentException('non-nullable authenticity_verification cannot be null');
        }
        $this->container['authenticity_verification'] = $authenticity_verification;

        return $this;
    }

    /**
     * Gets available_coupons
     *
     * @return \eBay\Buy\Browse\Model\AvailableCoupon[]|null
     */
    public function getAvailableCoupons(): ?array
    {
        return $this->container['available_coupons'];
    }

    /**
     * Sets available_coupons
     *
     * @param \eBay\Buy\Browse\Model\AvailableCoupon[]|null $available_coupons A list of available coupons for the item.<br><br><span class=\"tablenote\"><b>Note:</b> The Browse API only acknowledges item-level coupons. This array will only return coupons linked with an item. Store-level coupons offered by sellers across their entire store will not be returned.</span>
     *
     * @return $this
     */
    public function setAvailableCoupons(?array $available_coupons): static
    {
        if (is_null($available_coupons)) {
            throw new InvalidArgumentException('non-nullable available_coupons cannot be null');
        }
        $this->container['available_coupons'] = $available_coupons;

        return $this;
    }

    /**
     * Gets bid_count
     *
     * @return int|null
     */
    public function getBidCount(): ?int
    {
        return $this->container['bid_count'];
    }

    /**
     * Sets bid_count
     *
     * @param int|null $bid_count This integer value indicates the total number of bids that have been placed against an auction item. This field is returned only for auction items.
     *
     * @return $this
     */
    public function setBidCount(?int $bid_count): static
    {
        if (is_null($bid_count)) {
            throw new InvalidArgumentException('non-nullable bid_count cannot be null');
        }
        $this->container['bid_count'] = $bid_count;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string|null
     */
    public function getBrand(): ?string
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand (Primary Item Aspect) The name brand of the item, such as Nike, Apple, etc.  All the item aspects, including this aspect, are returned in the <b> localizedAspects</b> container.
     *
     * @return $this
     */
    public function setBrand(?string $brand): static
    {
        if (is_null($brand)) {
            throw new InvalidArgumentException('non-nullable brand cannot be null');
        }
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets buying_options
     *
     * @return string[]|null
     */
    public function getBuyingOptions(): ?array
    {
        return $this->container['buying_options'];
    }

    /**
     * Sets buying_options
     *
     * @param string[]|null $buying_options A comma separated list of all the purchase options available for the item. The values returned are:<ul><li><code>FIXED_PRICE</code> - Indicates the buyer can purchase the item for a set price using the Buy It Now button.</li><li><code>AUCTION</code> - Indicates the buyer can place a bid for the item. After the first bid is placed, this becomes a live auction item and is the only buying option for this item.</li><li><code>BEST_OFFER</code> - Indicates the buyer can send the seller a price they're willing to pay for the item. The seller can accept, reject, or send a counter offer. For more information on how this works, see <a href=\"https://www.ebay.com/help/buying/buy-now/making-best-offer?id=4019 \">Making a Best Offer</a>.</li><li><code>CLASSIFIED_AD</code> - Indicates that the final sales transaction is to be completed outside of the eBay environment.</li></ul>Code so that your app gracefully handles any future changes to this list.
     *
     * @return $this
     */
    public function setBuyingOptions(?array $buying_options): static
    {
        if (is_null($buying_options)) {
            throw new InvalidArgumentException('non-nullable buying_options cannot be null');
        }
        $this->container['buying_options'] = $buying_options;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return string|null
     */
    public function getCategoryId(): ?string
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string|null $category_id The ID of the leaf category for this item. A leaf category is the lowest level in that category and has no children.
     *
     * @return $this
     */
    public function setCategoryId(?string $category_id): static
    {
        if (is_null($category_id)) {
            throw new InvalidArgumentException('non-nullable category_id cannot be null');
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets category_id_path
     *
     * @return string|null
     */
    public function getCategoryIdPath(): ?string
    {
        return $this->container['category_id_path'];
    }

    /**
     * Sets category_id_path
     *
     * @param string|null $category_id_path The IDs of every category in the item path, separated by pipe characters, starting with the top level parent category.<br><br>For example, if an item belongs to the top level category Home and Garden (category ID 11700), followed by Home Improvement (159907), Heating, Cooling and Air (69197), and Thermostats (115947), the field would return the value: <code>11700|159907|69197|115947</code>.
     *
     * @return $this
     */
    public function setCategoryIdPath(?string $category_id_path): static
    {
        if (is_null($category_id_path)) {
            throw new InvalidArgumentException('non-nullable category_id_path cannot be null');
        }
        $this->container['category_id_path'] = $category_id_path;

        return $this;
    }

    /**
     * Gets category_path
     *
     * @return string|null
     */
    public function getCategoryPath(): ?string
    {
        return $this->container['category_path'];
    }

    /**
     * Sets category_path
     *
     * @param string|null $category_path Text that shows the category hierarchy of the item. For example: Computers/Tablets &amp; Networking, Laptops &amp; Netbooks, PC Laptops &amp; Netbooks
     *
     * @return $this
     */
    public function setCategoryPath(?string $category_path): static
    {
        if (is_null($category_path)) {
            throw new InvalidArgumentException('non-nullable category_path cannot be null');
        }
        $this->container['category_path'] = $category_path;

        return $this;
    }

    /**
     * Gets charity_terms
     *
     * @return \eBay\Buy\Browse\Model\ItemCharityTerms|null
     */
    public function getCharityTerms(): ?\eBay\Buy\Browse\Model\ItemCharityTerms
    {
        return $this->container['charity_terms'];
    }

    /**
     * Sets charity_terms
     *
     * @param \eBay\Buy\Browse\Model\ItemCharityTerms|null $charity_terms charity_terms
     *
     * @return $this
     */
    public function setCharityTerms(?\eBay\Buy\Browse\Model\ItemCharityTerms $charity_terms): static
    {
        if (is_null($charity_terms)) {
            throw new InvalidArgumentException('non-nullable charity_terms cannot be null');
        }
        $this->container['charity_terms'] = $charity_terms;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor(): ?string
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color (Primary Item Aspect) Text describing the color of the item.  All the item aspects, including this aspect, are returned in the <b> localizedAspects</b> container.
     *
     * @return $this
     */
    public function setColor(?string $color): static
    {
        if (is_null($color)) {
            throw new InvalidArgumentException('non-nullable color cannot be null');
        }
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string|null
     */
    public function getCondition(): ?string
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string|null $condition A short text description for the condition of the item, such as New or Used. For a list of condition names, see <a href=\"/api-docs/sell/static/metadata/condition-id-values.html \" target=\"_blank\">Item Condition IDs and Names</a>.  <br><br>Code so that your app gracefully handles any future changes to this list.
     *
     * @return $this
     */
    public function setCondition(?string $condition): static
    {
        if (is_null($condition)) {
            throw new InvalidArgumentException('non-nullable condition cannot be null');
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets condition_description
     *
     * @return string|null
     */
    public function getConditionDescription(): ?string
    {
        return $this->container['condition_description'];
    }

    /**
     * Sets condition_description
     *
     * @param string|null $condition_description A full text description for the condition of the item. This field elaborates on the value specified in the <b>condition</b> field and provides full details for the condition of the item.
     *
     * @return $this
     */
    public function setConditionDescription(?string $condition_description): static
    {
        if (is_null($condition_description)) {
            throw new InvalidArgumentException('non-nullable condition_description cannot be null');
        }
        $this->container['condition_description'] = $condition_description;

        return $this;
    }

    /**
     * Gets condition_descriptors
     *
     * @return \eBay\Buy\Browse\Model\ConditionDescriptor[]|null
     */
    public function getConditionDescriptors(): ?array
    {
        return $this->container['condition_descriptors'];
    }

    /**
     * Sets condition_descriptors
     *
     * @param \eBay\Buy\Browse\Model\ConditionDescriptor[]|null $condition_descriptors This array is used by the seller to provide additional information about the condition of an item in a structured format. Condition descriptors are name-value attributes that indicate details about a particular condition of an item.<br><br><span class=\"tablenote\"><b>Note:</b> Condition descriptors are currently only available for the following trading card categories:<ul><li>Non-Sport Trading Card Singles</li><li>CCG Individual Cards</li><li>Sports Trading Card Singles</li></ul></span>
     *
     * @return $this
     */
    public function setConditionDescriptors(?array $condition_descriptors): static
    {
        if (is_null($condition_descriptors)) {
            throw new InvalidArgumentException('non-nullable condition_descriptors cannot be null');
        }
        $this->container['condition_descriptors'] = $condition_descriptors;

        return $this;
    }

    /**
     * Gets condition_id
     *
     * @return string|null
     */
    public function getConditionId(): ?string
    {
        return $this->container['condition_id'];
    }

    /**
     * Sets condition_id
     *
     * @param string|null $condition_id The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see <a href=\"/api-docs/sell/static/metadata/condition-id-values.html \" target=\"_blank\">Item Condition IDs and Names</a>. <br><br>Code so that your app gracefully handles any future changes to this list.
     *
     * @return $this
     */
    public function setConditionId(?string $condition_id): static
    {
        if (is_null($condition_id)) {
            throw new InvalidArgumentException('non-nullable condition_id cannot be null');
        }
        $this->container['condition_id'] = $condition_id;

        return $this;
    }

    /**
     * Gets current_bid_price
     *
     * @return \eBay\Buy\Browse\Model\ConvertedAmount|null
     */
    public function getCurrentBidPrice(): ?\eBay\Buy\Browse\Model\ConvertedAmount
    {
        return $this->container['current_bid_price'];
    }

    /**
     * Sets current_bid_price
     *
     * @param \eBay\Buy\Browse\Model\ConvertedAmount|null $current_bid_price current_bid_price
     *
     * @return $this
     */
    public function setCurrentBidPrice(?\eBay\Buy\Browse\Model\ConvertedAmount $current_bid_price): static
    {
        if (is_null($current_bid_price)) {
            throw new InvalidArgumentException('non-nullable current_bid_price cannot be null');
        }
        $this->container['current_bid_price'] = $current_bid_price;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The full description of the item that was created by the seller. This can be plain text or rich content and can be very large.
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets eco_participation_fee
     *
     * @return \eBay\Buy\Browse\Model\ConvertedAmount|null
     */
    public function getEcoParticipationFee(): ?\eBay\Buy\Browse\Model\ConvertedAmount
    {
        return $this->container['eco_participation_fee'];
    }

    /**
     * Sets eco_participation_fee
     *
     * @param \eBay\Buy\Browse\Model\ConvertedAmount|null $eco_participation_fee eco_participation_fee
     *
     * @return $this
     */
    public function setEcoParticipationFee(?\eBay\Buy\Browse\Model\ConvertedAmount $eco_participation_fee): static
    {
        if (is_null($eco_participation_fee)) {
            throw new InvalidArgumentException('non-nullable eco_participation_fee cannot be null');
        }
        $this->container['eco_participation_fee'] = $eco_participation_fee;

        return $this;
    }

    /**
     * Gets eligible_for_inline_checkout
     *
     * @return bool|null
     */
    public function getEligibleForInlineCheckout(): ?bool
    {
        return $this->container['eligible_for_inline_checkout'];
    }

    /**
     * Sets eligible_for_inline_checkout
     *
     * @param bool|null $eligible_for_inline_checkout This field indicates if the item can be purchased using the Buy <a href=\"/api-docs/buy/order/resources/methods\">Order API</a>. <ul> <li>If the value of this field is <code>true</code>, this indicates that the item can be purchased using the <b> Order API</b>. </li>  <li>If the value of this field is <code>false</code>, this indicates that the item cannot be purchased using the <b> Order API</b> and must be purchased on the eBay site.</li> </ul>
     *
     * @return $this
     */
    public function setEligibleForInlineCheckout(?bool $eligible_for_inline_checkout): static
    {
        if (is_null($eligible_for_inline_checkout)) {
            throw new InvalidArgumentException('non-nullable eligible_for_inline_checkout cannot be null');
        }
        $this->container['eligible_for_inline_checkout'] = $eligible_for_inline_checkout;

        return $this;
    }

    /**
     * Gets enabled_for_guest_checkout
     *
     * @return bool|null
     */
    public function getEnabledForGuestCheckout(): ?bool
    {
        return $this->container['enabled_for_guest_checkout'];
    }

    /**
     * Sets enabled_for_guest_checkout
     *
     * @param bool|null $enabled_for_guest_checkout This indicates if the item can be purchased using Guest Checkout in the <a href=\"/api-docs/buy/order/resources/methods\">Order API</a>. You can use this flag to exclude items from your inventory that are not eligible for Guest Checkout, such as gift cards.
     *
     * @return $this
     */
    public function setEnabledForGuestCheckout(?bool $enabled_for_guest_checkout): static
    {
        if (is_null($enabled_for_guest_checkout)) {
            throw new InvalidArgumentException('non-nullable enabled_for_guest_checkout cannot be null');
        }
        $this->container['enabled_for_guest_checkout'] = $enabled_for_guest_checkout;

        return $this;
    }

    /**
     * Gets energy_efficiency_class
     *
     * @return string|null
     */
    public function getEnergyEfficiencyClass(): ?string
    {
        return $this->container['energy_efficiency_class'];
    }

    /**
     * Sets energy_efficiency_class
     *
     * @param string|null $energy_efficiency_class This indicates the <a href=\"https://en.wikipedia.org/wiki/European_Union_energy_label \">European energy efficiency</a> rating (EEK) of the item. This field is returned only if the seller specified the energy efficiency rating. <br><br>The rating is a set of energy efficiency classes from A to G, where 'A' is the most energy efficient and 'G' is the least efficient. This rating helps buyers choose between various models. <br><br>When the manufacturer's specifications for this item are available, the link to this information is returned in the <b> productFicheWebUrl</b> field.
     *
     * @return $this
     */
    public function setEnergyEfficiencyClass(?string $energy_efficiency_class): static
    {
        if (is_null($energy_efficiency_class)) {
            throw new InvalidArgumentException('non-nullable energy_efficiency_class cannot be null');
        }
        $this->container['energy_efficiency_class'] = $energy_efficiency_class;

        return $this;
    }

    /**
     * Gets epid
     *
     * @return string|null
     */
    public function getEpid(): ?string
    {
        return $this->container['epid'];
    }

    /**
     * Sets epid
     *
     * @param string|null $epid An EPID is the eBay product identifier of a product from the eBay product catalog.  This indicates the product in which the item belongs.
     *
     * @return $this
     */
    public function setEpid(?string $epid): static
    {
        if (is_null($epid)) {
            throw new InvalidArgumentException('non-nullable epid cannot be null');
        }
        $this->container['epid'] = $epid;

        return $this;
    }

    /**
     * Gets estimated_availabilities
     *
     * @return \eBay\Buy\Browse\Model\EstimatedAvailability[]|null
     */
    public function getEstimatedAvailabilities(): ?array
    {
        return $this->container['estimated_availabilities'];
    }

    /**
     * Sets estimated_availabilities
     *
     * @param \eBay\Buy\Browse\Model\EstimatedAvailability[]|null $estimated_availabilities The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.
     *
     * @return $this
     */
    public function setEstimatedAvailabilities(?array $estimated_availabilities): static
    {
        if (is_null($estimated_availabilities)) {
            throw new InvalidArgumentException('non-nullable estimated_availabilities cannot be null');
        }
        $this->container['estimated_availabilities'] = $estimated_availabilities;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender(): ?string
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender (Primary Item Aspect) The gender for the item. This is used for items that could vary by gender, such as clothing. For example: male, female, or unisex. All the item aspects, including this aspect, are returned in the <b> localizedAspects</b> container.
     *
     * @return $this
     */
    public function setGender(?string $gender): static
    {
        if (is_null($gender)) {
            throw new InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets gtin
     *
     * @return string|null
     */
    public function getGtin(): ?string
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string|null $gtin The unique Global Trade Item number of the item as defined by <a href=\"https://www.gtin.info \" target=\"_blank\">https://www.gtin.info</a>. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.
     *
     * @return $this
     */
    public function setGtin(?string $gtin): static
    {
        if (is_null($gtin)) {
            throw new InvalidArgumentException('non-nullable gtin cannot be null');
        }
        $this->container['gtin'] = $gtin;

        return $this;
    }

    /**
     * Gets hazardous_materials_labels
     *
     * @return \eBay\Buy\Browse\Model\HazardousMaterialsLabels|null
     */
    public function getHazardousMaterialsLabels(): ?\eBay\Buy\Browse\Model\HazardousMaterialsLabels
    {
        return $this->container['hazardous_materials_labels'];
    }

    /**
     * Sets hazardous_materials_labels
     *
     * @param \eBay\Buy\Browse\Model\HazardousMaterialsLabels|null $hazardous_materials_labels hazardous_materials_labels
     *
     * @return $this
     */
    public function setHazardousMaterialsLabels(?\eBay\Buy\Browse\Model\HazardousMaterialsLabels $hazardous_materials_labels): static
    {
        if (is_null($hazardous_materials_labels)) {
            throw new InvalidArgumentException('non-nullable hazardous_materials_labels cannot be null');
        }
        $this->container['hazardous_materials_labels'] = $hazardous_materials_labels;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \eBay\Buy\Browse\Model\Image|null
     */
    public function getImage(): ?\eBay\Buy\Browse\Model\Image
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \eBay\Buy\Browse\Model\Image|null $image image
     *
     * @return $this
     */
    public function setImage(?\eBay\Buy\Browse\Model\Image $image): static
    {
        if (is_null($image)) {
            throw new InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets immediate_pay
     *
     * @return bool|null
     */
    public function getImmediatePay(): ?bool
    {
        return $this->container['immediate_pay'];
    }

    /**
     * Sets immediate_pay
     *
     * @param bool|null $immediate_pay A value of <code>true</code> indicates that the seller requires immediate payment from the buyer when purchasing an item.<br><br><span class=\"tablenote\"><b>Note:</b> It is possible for this field to be set to <code>true</code>, but not apply in some scenarios. For example, immediate payment is not applicable for auction listings that have a winning bidder, for buyers purchases that involve the Best Offer feature, or for offline transactions.</span>
     *
     * @return $this
     */
    public function setImmediatePay(?bool $immediate_pay): static
    {
        if (is_null($immediate_pay)) {
            throw new InvalidArgumentException('non-nullable immediate_pay cannot be null');
        }
        $this->container['immediate_pay'] = $immediate_pay;

        return $this;
    }

    /**
     * Gets inferred_epid
     *
     * @return string|null
     */
    public function getInferredEpid(): ?string
    {
        return $this->container['inferred_epid'];
    }

    /**
     * Sets inferred_epid
     *
     * @param string|null $inferred_epid The ePID (eBay Product ID of a product from the eBay product catalog) for the item, which has been programmatically determined by eBay using the item's title, aspects, and other data. <br><br>If the seller provided an ePID for the item, the seller's value is returned in the <b> epid</b> field. <br><br><span class=\"tablenote\"><b> Note: </b> This field is returned only for authorized Partners.</span>
     *
     * @return $this
     */
    public function setInferredEpid(?string $inferred_epid): static
    {
        if (is_null($inferred_epid)) {
            throw new InvalidArgumentException('non-nullable inferred_epid cannot be null');
        }
        $this->container['inferred_epid'] = $inferred_epid;

        return $this;
    }

    /**
     * Gets item_affiliate_web_url
     *
     * @return string|null
     */
    public function getItemAffiliateWebUrl(): ?string
    {
        return $this->container['item_affiliate_web_url'];
    }

    /**
     * Sets item_affiliate_web_url
     *
     * @param string|null $item_affiliate_web_url The URL to the View Item page of the item which includes the affiliate tracking ID.<br><br><span class=\"tablenote\"><b>Note:</b> In order to receive commissions on sales, eBay Partner Network affiliates must use this URL to forward buyers to the listing on the eBay marketplace.</span><br>The <b>itemAffiliateWebUrl</b> is only returned if:<ul><li>The marketplace through which the item is being viewed is part of the eBay Partner Network. Currently Singapore (<code>EBAY_SG</code>) is <b>not</b> supported.<br><br>For additional information, refer to <a href=\"https://partnerhelp.ebay.com/helpcenter/s/article/countries-available-as-a-program-in-EPN?language=en_US \" target=\"_blank\">eBay Partner Network</a>.</li><li>The seller enables affiliate tracking for the item by including the <code><a href=\"/api-docs/buy/static/api-browse.html#Headers\">X-EBAY-C-ENDUSERCTX</a></code> request header in the method.</li></ul>
     *
     * @return $this
     */
    public function setItemAffiliateWebUrl(?string $item_affiliate_web_url): static
    {
        if (is_null($item_affiliate_web_url)) {
            throw new InvalidArgumentException('non-nullable item_affiliate_web_url cannot be null');
        }
        $this->container['item_affiliate_web_url'] = $item_affiliate_web_url;

        return $this;
    }

    /**
     * Gets item_creation_date
     *
     * @return string|null
     */
    public function getItemCreationDate(): ?string
    {
        return $this->container['item_creation_date'];
    }

    /**
     * Sets item_creation_date
     *
     * @param string|null $item_creation_date A timestamp that indicates the date and time an item listing was created.<br><br>This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which can be converted into the local time of the buyer.
     *
     * @return $this
     */
    public function setItemCreationDate(?string $item_creation_date): static
    {
        if (is_null($item_creation_date)) {
            throw new InvalidArgumentException('non-nullable item_creation_date cannot be null');
        }
        $this->container['item_creation_date'] = $item_creation_date;

        return $this;
    }

    /**
     * Gets item_end_date
     *
     * @return string|null
     */
    public function getItemEndDate(): ?string
    {
        return $this->container['item_end_date'];
    }

    /**
     * Sets item_end_date
     *
     * @param string|null $item_end_date A timestamp that indicates the date and time an auction listing will end.<br><br>If a fixed-price listing has ended, this field indicates the date and time the listing ended.<br><br>This value is returned in UTC format (<code>yyyy-MM-ddThh:mm:ss.sssZ</code>), which can be converted into the local time of the buyer.
     *
     * @return $this
     */
    public function setItemEndDate(?string $item_end_date): static
    {
        if (is_null($item_end_date)) {
            throw new InvalidArgumentException('non-nullable item_end_date cannot be null');
        }
        $this->container['item_end_date'] = $item_end_date;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return string|null
     */
    public function getItemId(): ?string
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string|null $item_id The unique RESTful identifier of the item.
     *
     * @return $this
     */
    public function setItemId(?string $item_id): static
    {
        if (is_null($item_id)) {
            throw new InvalidArgumentException('non-nullable item_id cannot be null');
        }
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets item_location
     *
     * @return \eBay\Buy\Browse\Model\Address|null
     */
    public function getItemLocation(): ?\eBay\Buy\Browse\Model\Address
    {
        return $this->container['item_location'];
    }

    /**
     * Sets item_location
     *
     * @param \eBay\Buy\Browse\Model\Address|null $item_location item_location
     *
     * @return $this
     */
    public function setItemLocation(?\eBay\Buy\Browse\Model\Address $item_location): static
    {
        if (is_null($item_location)) {
            throw new InvalidArgumentException('non-nullable item_location cannot be null');
        }
        $this->container['item_location'] = $item_location;

        return $this;
    }

    /**
     * Gets item_web_url
     *
     * @return string|null
     */
    public function getItemWebUrl(): ?string
    {
        return $this->container['item_web_url'];
    }

    /**
     * Sets item_web_url
     *
     * @param string|null $item_web_url The URL of the View Item page of the item. This enables you to include a \"Report Item on eBay\" link that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.
     *
     * @return $this
     */
    public function setItemWebUrl(?string $item_web_url): static
    {
        if (is_null($item_web_url)) {
            throw new InvalidArgumentException('non-nullable item_web_url cannot be null');
        }
        $this->container['item_web_url'] = $item_web_url;

        return $this;
    }

    /**
     * Gets legacy_item_id
     *
     * @return string|null
     */
    public function getLegacyItemId(): ?string
    {
        return $this->container['legacy_item_id'];
    }

    /**
     * Sets legacy_item_id
     *
     * @param string|null $legacy_item_id The unique identifier of the eBay listing that contains the item. This is the traditional/legacy ID that is often seen in the URL of the listing View Item page.
     *
     * @return $this
     */
    public function setLegacyItemId(?string $legacy_item_id): static
    {
        if (is_null($legacy_item_id)) {
            throw new InvalidArgumentException('non-nullable legacy_item_id cannot be null');
        }
        $this->container['legacy_item_id'] = $legacy_item_id;

        return $this;
    }

    /**
     * Gets listing_marketplace_id
     *
     * @return string|null
     */
    public function getListingMarketplaceId(): ?string
    {
        return $this->container['listing_marketplace_id'];
    }

    /**
     * Sets listing_marketplace_id
     *
     * @param string|null $listing_marketplace_id The ID of the eBay marketplace where the item is listed. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setListingMarketplaceId(?string $listing_marketplace_id): static
    {
        if (is_null($listing_marketplace_id)) {
            throw new InvalidArgumentException('non-nullable listing_marketplace_id cannot be null');
        }
        $this->container['listing_marketplace_id'] = $listing_marketplace_id;

        return $this;
    }

    /**
     * Gets localized_aspects
     *
     * @return \eBay\Buy\Browse\Model\TypedNameValue[]|null
     */
    public function getLocalizedAspects(): ?array
    {
        return $this->container['localized_aspects'];
    }

    /**
     * Sets localized_aspects
     *
     * @param \eBay\Buy\Browse\Model\TypedNameValue[]|null $localized_aspects An array of containers that show the complete list of the aspect name/value pairs that describe the variation of the item.
     *
     * @return $this
     */
    public function setLocalizedAspects(?array $localized_aspects): static
    {
        if (is_null($localized_aspects)) {
            throw new InvalidArgumentException('non-nullable localized_aspects cannot be null');
        }
        $this->container['localized_aspects'] = $localized_aspects;

        return $this;
    }

    /**
     * Gets lot_size
     *
     * @return int|null
     */
    public function getLotSize(): ?int
    {
        return $this->container['lot_size'];
    }

    /**
     * Sets lot_size
     *
     * @param int|null $lot_size The number of items in a lot. In other words, a lot size is the number of items that are being sold together.  <br><br>A lot is a set of two or more items included in a single listing that must be purchased together in a single order line item. All the items in the lot are the same but there can be multiple items in a single lot,  such as the package of batteries shown in the example below.   <br><br><table border=\"1\"> <tr> <tr>  <th>Item</th>  <th>Lot Definition</th> <th>Lot Size</th></tr>  <tr>  <td>A package of 24 AA batteries</td>  <td>A box of 10 packages</td>  <td>10  </td> </tr>  <tr>  <td>A P235/75-15 Goodyear tire </td>  <td>4 tires  </td>  <td>4  </td> </tr> <tr> <td>Fashion Jewelry Rings  </td> <td>Package of 100 assorted rings  </td> <td>100 </td> </tr></table>  <br><br><span class=\"tablenote\"><b>Note: </b>  Lots are not supported in all categories.  </span>
     *
     * @return $this
     */
    public function setLotSize(?int $lot_size): static
    {
        if (is_null($lot_size)) {
            throw new InvalidArgumentException('non-nullable lot_size cannot be null');
        }
        $this->container['lot_size'] = $lot_size;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return \eBay\Buy\Browse\Model\CompanyAddress|null
     */
    public function getManufacturer(): ?\eBay\Buy\Browse\Model\CompanyAddress
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param \eBay\Buy\Browse\Model\CompanyAddress|null $manufacturer manufacturer
     *
     * @return $this
     */
    public function setManufacturer(?\eBay\Buy\Browse\Model\CompanyAddress $manufacturer): static
    {
        if (is_null($manufacturer)) {
            throw new InvalidArgumentException('non-nullable manufacturer cannot be null');
        }
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets marketing_price
     *
     * @return \eBay\Buy\Browse\Model\MarketingPrice|null
     */
    public function getMarketingPrice(): ?\eBay\Buy\Browse\Model\MarketingPrice
    {
        return $this->container['marketing_price'];
    }

    /**
     * Sets marketing_price
     *
     * @param \eBay\Buy\Browse\Model\MarketingPrice|null $marketing_price marketing_price
     *
     * @return $this
     */
    public function setMarketingPrice(?\eBay\Buy\Browse\Model\MarketingPrice $marketing_price): static
    {
        if (is_null($marketing_price)) {
            throw new InvalidArgumentException('non-nullable marketing_price cannot be null');
        }
        $this->container['marketing_price'] = $marketing_price;

        return $this;
    }

    /**
     * Gets material
     *
     * @return string|null
     */
    public function getMaterial(): ?string
    {
        return $this->container['material'];
    }

    /**
     * Sets material
     *
     * @param string|null $material (Primary Item Aspect) Text describing what the item is made of. For example, silk. All the item aspects, including this aspect, are returned in the <b> localizedAspects</b> container.
     *
     * @return $this
     */
    public function setMaterial(?string $material): static
    {
        if (is_null($material)) {
            throw new InvalidArgumentException('non-nullable material cannot be null');
        }
        $this->container['material'] = $material;

        return $this;
    }

    /**
     * Gets minimum_price_to_bid
     *
     * @return \eBay\Buy\Browse\Model\ConvertedAmount|null
     */
    public function getMinimumPriceToBid(): ?\eBay\Buy\Browse\Model\ConvertedAmount
    {
        return $this->container['minimum_price_to_bid'];
    }

    /**
     * Sets minimum_price_to_bid
     *
     * @param \eBay\Buy\Browse\Model\ConvertedAmount|null $minimum_price_to_bid minimum_price_to_bid
     *
     * @return $this
     */
    public function setMinimumPriceToBid(?\eBay\Buy\Browse\Model\ConvertedAmount $minimum_price_to_bid): static
    {
        if (is_null($minimum_price_to_bid)) {
            throw new InvalidArgumentException('non-nullable minimum_price_to_bid cannot be null');
        }
        $this->container['minimum_price_to_bid'] = $minimum_price_to_bid;

        return $this;
    }

    /**
     * Gets mpn
     *
     * @return string|null
     */
    public function getMpn(): ?string
    {
        return $this->container['mpn'];
    }

    /**
     * Sets mpn
     *
     * @param string|null $mpn The manufacturer's part number, which is a unique number that identifies a specific product. To identify the product, this is always used along with brand.
     *
     * @return $this
     */
    public function setMpn(?string $mpn): static
    {
        if (is_null($mpn)) {
            throw new InvalidArgumentException('non-nullable mpn cannot be null');
        }
        $this->container['mpn'] = $mpn;

        return $this;
    }

    /**
     * Gets pattern
     *
     * @return string|null
     */
    public function getPattern(): ?string
    {
        return $this->container['pattern'];
    }

    /**
     * Sets pattern
     *
     * @param string|null $pattern (Primary Item Aspect) Text describing the pattern used on the item. For example, paisley. All the item aspects, including this aspect, are returned in the <b> localizedAspects</b> container.
     *
     * @return $this
     */
    public function setPattern(?string $pattern): static
    {
        if (is_null($pattern)) {
            throw new InvalidArgumentException('non-nullable pattern cannot be null');
        }
        $this->container['pattern'] = $pattern;

        return $this;
    }

    /**
     * Gets payment_methods
     *
     * @return \eBay\Buy\Browse\Model\PaymentMethod[]|null
     */
    public function getPaymentMethods(): ?array
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     *
     * @param \eBay\Buy\Browse\Model\PaymentMethod[]|null $payment_methods The payment methods for the item, including the payment method types, brands, and instructions for the buyer.
     *
     * @return $this
     */
    public function setPaymentMethods(?array $payment_methods): static
    {
        if (is_null($payment_methods)) {
            throw new InvalidArgumentException('non-nullable payment_methods cannot be null');
        }
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \eBay\Buy\Browse\Model\ConvertedAmount|null
     */
    public function getPrice(): ?\eBay\Buy\Browse\Model\ConvertedAmount
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \eBay\Buy\Browse\Model\ConvertedAmount|null $price price
     *
     * @return $this
     */
    public function setPrice(?\eBay\Buy\Browse\Model\ConvertedAmount $price): static
    {
        if (is_null($price)) {
            throw new InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_display_condition
     *
     * @return string|null
     */
    public function getPriceDisplayCondition(): ?string
    {
        return $this->container['price_display_condition'];
    }

    /**
     * Sets price_display_condition
     *
     * @param string|null $price_display_condition Indicates when in the buying flow the item's price can appear for minimum advertised price (MAP) items, which is the lowest price a retailer can advertise/show for this item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PriceDisplayConditionEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setPriceDisplayCondition(?string $price_display_condition): static
    {
        if (is_null($price_display_condition)) {
            throw new InvalidArgumentException('non-nullable price_display_condition cannot be null');
        }
        $this->container['price_display_condition'] = $price_display_condition;

        return $this;
    }

    /**
     * Gets primary_item_group
     *
     * @return \eBay\Buy\Browse\Model\ItemGroupSummary|null
     */
    public function getPrimaryItemGroup(): ?\eBay\Buy\Browse\Model\ItemGroupSummary
    {
        return $this->container['primary_item_group'];
    }

    /**
     * Sets primary_item_group
     *
     * @param \eBay\Buy\Browse\Model\ItemGroupSummary|null $primary_item_group primary_item_group
     *
     * @return $this
     */
    public function setPrimaryItemGroup(?\eBay\Buy\Browse\Model\ItemGroupSummary $primary_item_group): static
    {
        if (is_null($primary_item_group)) {
            throw new InvalidArgumentException('non-nullable primary_item_group cannot be null');
        }
        $this->container['primary_item_group'] = $primary_item_group;

        return $this;
    }

    /**
     * Gets primary_product_review_rating
     *
     * @return \eBay\Buy\Browse\Model\ReviewRating|null
     */
    public function getPrimaryProductReviewRating(): ?\eBay\Buy\Browse\Model\ReviewRating
    {
        return $this->container['primary_product_review_rating'];
    }

    /**
     * Sets primary_product_review_rating
     *
     * @param \eBay\Buy\Browse\Model\ReviewRating|null $primary_product_review_rating primary_product_review_rating
     *
     * @return $this
     */
    public function setPrimaryProductReviewRating(?\eBay\Buy\Browse\Model\ReviewRating $primary_product_review_rating): static
    {
        if (is_null($primary_product_review_rating)) {
            throw new InvalidArgumentException('non-nullable primary_product_review_rating cannot be null');
        }
        $this->container['primary_product_review_rating'] = $primary_product_review_rating;

        return $this;
    }

    /**
     * Gets priority_listing
     *
     * @return bool|null
     */
    public function getPriorityListing(): ?bool
    {
        return $this->container['priority_listing'];
    }

    /**
     * Sets priority_listing
     *
     * @param bool|null $priority_listing This field is returned as <code>true</code> if the listing is part of a Promoted Listing campaign. Promoted Listings are available to Above Standard and Top Rated sellers with recent sales activity.<br><br>For more information, see <a href=\"https://pages.ebay.com/seller-center/listing-and-marketing/promoted-listings.html \" target=\"_blank\">Promoted Listings</a>.
     *
     * @return $this
     */
    public function setPriorityListing(?bool $priority_listing): static
    {
        if (is_null($priority_listing)) {
            throw new InvalidArgumentException('non-nullable priority_listing cannot be null');
        }
        $this->container['priority_listing'] = $priority_listing;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \eBay\Buy\Browse\Model\Product|null
     */
    public function getProduct(): ?\eBay\Buy\Browse\Model\Product
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \eBay\Buy\Browse\Model\Product|null $product product
     *
     * @return $this
     */
    public function setProduct(?\eBay\Buy\Browse\Model\Product $product): static
    {
        if (is_null($product)) {
            throw new InvalidArgumentException('non-nullable product cannot be null');
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets product_fiche_web_url
     *
     * @return string|null
     */
    public function getProductFicheWebUrl(): ?string
    {
        return $this->container['product_fiche_web_url'];
    }

    /**
     * Sets product_fiche_web_url
     *
     * @param string|null $product_fiche_web_url The URL of a page containing the manufacturer's specification of this item, which helps buyers make a purchasing decision. This information is available only for items that include the European energy efficiency rating (EEK) but is not available for <em> all</em> items with an EEK rating and is returned only if this information is available. The EEK rating of the item is returned in the <b> energyEfficiencyClass</b> field.
     *
     * @return $this
     */
    public function setProductFicheWebUrl(?string $product_fiche_web_url): static
    {
        if (is_null($product_fiche_web_url)) {
            throw new InvalidArgumentException('non-nullable product_fiche_web_url cannot be null');
        }
        $this->container['product_fiche_web_url'] = $product_fiche_web_url;

        return $this;
    }

    /**
     * Gets product_safety_labels
     *
     * @return \eBay\Buy\Browse\Model\ProductSafetyLabels|null
     */
    public function getProductSafetyLabels(): ?\eBay\Buy\Browse\Model\ProductSafetyLabels
    {
        return $this->container['product_safety_labels'];
    }

    /**
     * Sets product_safety_labels
     *
     * @param \eBay\Buy\Browse\Model\ProductSafetyLabels|null $product_safety_labels product_safety_labels
     *
     * @return $this
     */
    public function setProductSafetyLabels(?\eBay\Buy\Browse\Model\ProductSafetyLabels $product_safety_labels): static
    {
        if (is_null($product_safety_labels)) {
            throw new InvalidArgumentException('non-nullable product_safety_labels cannot be null');
        }
        $this->container['product_safety_labels'] = $product_safety_labels;

        return $this;
    }

    /**
     * Gets qualified_programs
     *
     * @return string[]|null
     */
    public function getQualifiedPrograms(): ?array
    {
        return $this->container['qualified_programs'];
    }

    /**
     * Sets qualified_programs
     *
     * @param string[]|null $qualified_programs An array of the qualified programs available for the item, or for the item group when returned for the <b>getItemsByItemGroup</b> method, such as EBAY_PLUS, AUTHENTICITY_GUARANTEE, and AUTHENTICITY_VERIFICATION.<br><br><span class=\"tablenote\"><b>Note: </b>The <code>AUTHENTICITY_GUARANTEE</code> value being returned by the <b>getItemsByItemGroup</b> method indicates that at least one item in the item group supports this program, but doesn't guarantee that the program is available to all items in the item group. To verify if the Authenticity Program is indeed available for the item that you are interested in, grab the <b>items.itemId</b> value for that item and use the <b>getItem</b> method. This method will return specific details on that particular item, including whether or not the Authenticity Guarantee Program is available for the item. Look for the <b>qualifiedPrograms</b> array and <b>authenticityGuarantee</b> container in the <b>getItem</b> response for this information.</span><br><br>eBay Plus is a premium account option for buyers, which provides benefits such as fast free domestic shipping and free returns on selected items. Top-Rated eBay sellers must opt in to eBay Plus to be able to offer the program on qualifying listings. Sellers must commit to next-day delivery of those items.<br><br><span class=\"tablenote\"><b>Note: </b> eBay Plus is available only to buyers in Germany, Austria, and Australia marketplaces.</span><br><br>The eBay <a href=\"https://pages.ebay.com/authenticity-guarantee/ \" target=\"_blank\">Authenticity Guarantee</a> program enables third-party authenticators to perform authentication verification inspections on items such as watches and sneakers.
     *
     * @return $this
     */
    public function setQualifiedPrograms(?array $qualified_programs): static
    {
        if (is_null($qualified_programs)) {
            throw new InvalidArgumentException('non-nullable qualified_programs cannot be null');
        }
        $this->container['qualified_programs'] = $qualified_programs;

        return $this;
    }

    /**
     * Gets quantity_limit_per_buyer
     *
     * @return int|null
     */
    public function getQuantityLimitPerBuyer(): ?int
    {
        return $this->container['quantity_limit_per_buyer'];
    }

    /**
     * Sets quantity_limit_per_buyer
     *
     * @param int|null $quantity_limit_per_buyer The maximum number for a specific item that one buyer can purchase.
     *
     * @return $this
     */
    public function setQuantityLimitPerBuyer(?int $quantity_limit_per_buyer): static
    {
        if (is_null($quantity_limit_per_buyer)) {
            throw new InvalidArgumentException('non-nullable quantity_limit_per_buyer cannot be null');
        }
        $this->container['quantity_limit_per_buyer'] = $quantity_limit_per_buyer;

        return $this;
    }

    /**
     * Gets repair_score
     *
     * @return string|null
     */
    public function getRepairScore(): ?string
    {
        return $this->container['repair_score'];
    }

    /**
     * Sets repair_score
     *
     * @param string|null $repair_score A score that describes how easy it is to repair the product. Score values range from 0.1 (hardest to repair) to 10.0 (easiest), always including a single decimal place.
     *
     * @return $this
     */
    public function setRepairScore(?string $repair_score): static
    {
        if (is_null($repair_score)) {
            throw new InvalidArgumentException('non-nullable repair_score cannot be null');
        }
        $this->container['repair_score'] = $repair_score;

        return $this;
    }

    /**
     * Gets reserve_price_met
     *
     * @return bool|null
     */
    public function getReservePriceMet(): ?bool
    {
        return $this->container['reserve_price_met'];
    }

    /**
     * Sets reserve_price_met
     *
     * @param bool|null $reserve_price_met This indicates if the reserve price of the item has been met. A reserve price is set by the seller and is the minimum amount the seller is willing to sell the item for. <p>If the highest bid is not equal to or higher than the reserve price when the auction ends, the listing ends and the item is not sold.</p> <p><b> Note: </b>This is returned only for auctions that have a reserve price.</p>
     *
     * @return $this
     */
    public function setReservePriceMet(?bool $reserve_price_met): static
    {
        if (is_null($reserve_price_met)) {
            throw new InvalidArgumentException('non-nullable reserve_price_met cannot be null');
        }
        $this->container['reserve_price_met'] = $reserve_price_met;

        return $this;
    }

    /**
     * Gets responsible_persons
     *
     * @return \eBay\Buy\Browse\Model\ResponsiblePerson[]|null
     */
    public function getResponsiblePersons(): ?array
    {
        return $this->container['responsible_persons'];
    }

    /**
     * Sets responsible_persons
     *
     * @param \eBay\Buy\Browse\Model\ResponsiblePerson[]|null $responsible_persons This array provides information about one or more EU-based Responsible Persons or entities associated with the listing.
     *
     * @return $this
     */
    public function setResponsiblePersons(?array $responsible_persons): static
    {
        if (is_null($responsible_persons)) {
            throw new InvalidArgumentException('non-nullable responsible_persons cannot be null');
        }
        $this->container['responsible_persons'] = $responsible_persons;

        return $this;
    }

    /**
     * Gets return_terms
     *
     * @return \eBay\Buy\Browse\Model\ItemReturnTerms|null
     */
    public function getReturnTerms(): ?\eBay\Buy\Browse\Model\ItemReturnTerms
    {
        return $this->container['return_terms'];
    }

    /**
     * Sets return_terms
     *
     * @param \eBay\Buy\Browse\Model\ItemReturnTerms|null $return_terms return_terms
     *
     * @return $this
     */
    public function setReturnTerms(?\eBay\Buy\Browse\Model\ItemReturnTerms $return_terms): static
    {
        if (is_null($return_terms)) {
            throw new InvalidArgumentException('non-nullable return_terms cannot be null');
        }
        $this->container['return_terms'] = $return_terms;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return \eBay\Buy\Browse\Model\SellerDetail|null
     */
    public function getSeller(): ?\eBay\Buy\Browse\Model\SellerDetail
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param \eBay\Buy\Browse\Model\SellerDetail|null $seller seller
     *
     * @return $this
     */
    public function setSeller(?\eBay\Buy\Browse\Model\SellerDetail $seller): static
    {
        if (is_null($seller)) {
            throw new InvalidArgumentException('non-nullable seller cannot be null');
        }
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets seller_custom_policies
     *
     * @return \eBay\Buy\Browse\Model\SellerCustomPolicy[]|null
     */
    public function getSellerCustomPolicies(): ?array
    {
        return $this->container['seller_custom_policies'];
    }

    /**
     * Sets seller_custom_policies
     *
     * @param \eBay\Buy\Browse\Model\SellerCustomPolicy[]|null $seller_custom_policies A list of the custom policies that are applied to a listing.
     *
     * @return $this
     */
    public function setSellerCustomPolicies(?array $seller_custom_policies): static
    {
        if (is_null($seller_custom_policies)) {
            throw new InvalidArgumentException('non-nullable seller_custom_policies cannot be null');
        }
        $this->container['seller_custom_policies'] = $seller_custom_policies;

        return $this;
    }

    /**
     * Gets seller_item_revision
     *
     * @return string|null
     */
    public function getSellerItemRevision(): ?string
    {
        return $this->container['seller_item_revision'];
    }

    /**
     * Sets seller_item_revision
     *
     * @param string|null $seller_item_revision An identifier generated/incremented when a seller revises the item. There are two types of item revisions: <ul><li>Seller changes, such as changing the title</li>  <li>eBay system changes, such as changing the quantity when an item is purchased</li></ul> This ID is changed <em> only</em> when the seller makes a change to the item. This means you cannot use this value to determine if the quantity has changed.
     *
     * @return $this
     */
    public function setSellerItemRevision(?string $seller_item_revision): static
    {
        if (is_null($seller_item_revision)) {
            throw new InvalidArgumentException('non-nullable seller_item_revision cannot be null');
        }
        $this->container['seller_item_revision'] = $seller_item_revision;

        return $this;
    }

    /**
     * Gets shipping_options
     *
     * @return \eBay\Buy\Browse\Model\ShippingOption[]|null
     */
    public function getShippingOptions(): ?array
    {
        return $this->container['shipping_options'];
    }

    /**
     * Sets shipping_options
     *
     * @param \eBay\Buy\Browse\Model\ShippingOption[]|null $shipping_options An array of shipping options containers that have the details about cost, carrier, etc. of one shipping option.<br><br><span class=\"tablenote\"><b>Note:</b> For items with calculated shipping, this array is only returned if the <b>X-EBAY-C-ENDUSERCTX</b> header is supplied.</span>
     *
     * @return $this
     */
    public function setShippingOptions(?array $shipping_options): static
    {
        if (is_null($shipping_options)) {
            throw new InvalidArgumentException('non-nullable shipping_options cannot be null');
        }
        $this->container['shipping_options'] = $shipping_options;

        return $this;
    }

    /**
     * Gets ship_to_locations
     *
     * @return \eBay\Buy\Browse\Model\ShipToLocations|null
     */
    public function getShipToLocations(): ?\eBay\Buy\Browse\Model\ShipToLocations
    {
        return $this->container['ship_to_locations'];
    }

    /**
     * Sets ship_to_locations
     *
     * @param \eBay\Buy\Browse\Model\ShipToLocations|null $ship_to_locations ship_to_locations
     *
     * @return $this
     */
    public function setShipToLocations(?\eBay\Buy\Browse\Model\ShipToLocations $ship_to_locations): static
    {
        if (is_null($ship_to_locations)) {
            throw new InvalidArgumentException('non-nullable ship_to_locations cannot be null');
        }
        $this->container['ship_to_locations'] = $ship_to_locations;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string|null
     */
    public function getShortDescription(): ?string
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string|null $short_description This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.).
     *
     * @return $this
     */
    public function setShortDescription(?string $short_description): static
    {
        if (is_null($short_description)) {
            throw new InvalidArgumentException('non-nullable short_description cannot be null');
        }
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string|null
     */
    public function getSize(): ?string
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string|null $size (Primary Item Aspect) The size of the item. For example, '7' for a size 7 shoe. All the item aspects, including this aspect, are returned in the <b> localizedAspects</b> container.
     *
     * @return $this
     */
    public function setSize(?string $size): static
    {
        if (is_null($size)) {
            throw new InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets size_system
     *
     * @return string|null
     */
    public function getSizeSystem(): ?string
    {
        return $this->container['size_system'];
    }

    /**
     * Sets size_system
     *
     * @param string|null $size_system (Primary Item Aspect) The sizing system of the country.  All the item aspects, including this aspect, are returned in the <b> localizedAspects</b> container. <br><br><b> Valid Values: </b> <br>AU (Australia),  <br>BR (Brazil), <br>CN (China),  <br>DE (Germany),  <br>EU (European Union),  <br> FR (France), <br> IT (Italy),  <br>JP (Japan), <br>MX (Mexico),  <br>US (USA), <br> UK (United Kingdom) <br><br>Code so that your app gracefully handles any future changes to this list.
     *
     * @return $this
     */
    public function setSizeSystem(?string $size_system): static
    {
        if (is_null($size_system)) {
            throw new InvalidArgumentException('non-nullable size_system cannot be null');
        }
        $this->container['size_system'] = $size_system;

        return $this;
    }

    /**
     * Gets size_type
     *
     * @return string|null
     */
    public function getSizeType(): ?string
    {
        return $this->container['size_type'];
    }

    /**
     * Sets size_type
     *
     * @param string|null $size_type (Primary Item Aspect) Text describing a size group in which the item would be included, such as regular, petite, plus, big-and-tall or maternity. All the item aspects, including this aspect, are returned in the <b> localizedAspects</b> container.
     *
     * @return $this
     */
    public function setSizeType(?string $size_type): static
    {
        if (is_null($size_type)) {
            throw new InvalidArgumentException('non-nullable size_type cannot be null');
        }
        $this->container['size_type'] = $size_type;

        return $this;
    }

    /**
     * Gets subtitle
     *
     * @return string|null
     */
    public function getSubtitle(): ?string
    {
        return $this->container['subtitle'];
    }

    /**
     * Sets subtitle
     *
     * @param string|null $subtitle A subtitle is optional and allows the seller to provide more information about the product, possibly including keywords that may assist with search results.
     *
     * @return $this
     */
    public function setSubtitle(?string $subtitle): static
    {
        if (is_null($subtitle)) {
            throw new InvalidArgumentException('non-nullable subtitle cannot be null');
        }
        $this->container['subtitle'] = $subtitle;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \eBay\Buy\Browse\Model\Taxes[]|null
     */
    public function getTaxes(): ?array
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \eBay\Buy\Browse\Model\Taxes[]|null $taxes The container for the tax information for the item.
     *
     * @return $this
     */
    public function setTaxes(?array $taxes): static
    {
        if (is_null($taxes)) {
            throw new InvalidArgumentException('non-nullable taxes cannot be null');
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle(): ?string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The seller-created title of the item. <br><br><b> Maximum Length: </b> 80 characters
     *
     * @return $this
     */
    public function setTitle(?string $title): static
    {
        if (is_null($title)) {
            throw new InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets top_rated_buying_experience
     *
     * @return bool|null
     */
    public function getTopRatedBuyingExperience(): ?bool
    {
        return $this->container['top_rated_buying_experience'];
    }

    /**
     * Sets top_rated_buying_experience
     *
     * @param bool|null $top_rated_buying_experience This indicates if the item a top-rated plus item. There are three benefits of a top-rated plus item: a  minimum 30-day money-back return policy, shipping the items in 1 business day with tracking provided, and the added comfort of knowing this item is from experienced sellers with the highest buyer ratings. See the <a href=\"https://pages.ebay.com/topratedplus/index.html \" target=\"_blank\">Top Rated Plus Items </a> and <a href=\"https://pages.ebay.com/help/sell/top-rated.html \" target=\"_blank\">Becoming a Top Rated Seller and qualifying for Top Rated Plus</a> help topics for more information.
     *
     * @return $this
     */
    public function setTopRatedBuyingExperience(?bool $top_rated_buying_experience): static
    {
        if (is_null($top_rated_buying_experience)) {
            throw new InvalidArgumentException('non-nullable top_rated_buying_experience cannot be null');
        }
        $this->container['top_rated_buying_experience'] = $top_rated_buying_experience;

        return $this;
    }

    /**
     * Gets tyre_label_image_url
     *
     * @return string|null
     */
    public function getTyreLabelImageUrl(): ?string
    {
        return $this->container['tyre_label_image_url'];
    }

    /**
     * Sets tyre_label_image_url
     *
     * @param string|null $tyre_label_image_url The URL to the image that shows the information on the tyre label.
     *
     * @return $this
     */
    public function setTyreLabelImageUrl(?string $tyre_label_image_url): static
    {
        if (is_null($tyre_label_image_url)) {
            throw new InvalidArgumentException('non-nullable tyre_label_image_url cannot be null');
        }
        $this->container['tyre_label_image_url'] = $tyre_label_image_url;

        return $this;
    }

    /**
     * Gets unique_bidder_count
     *
     * @return int|null
     */
    public function getUniqueBidderCount(): ?int
    {
        return $this->container['unique_bidder_count'];
    }

    /**
     * Sets unique_bidder_count
     *
     * @param int|null $unique_bidder_count This integer value indicates the number of different eBay users who have placed one or more bids on an auction item. This field is only applicable to auction items.
     *
     * @return $this
     */
    public function setUniqueBidderCount(?int $unique_bidder_count): static
    {
        if (is_null($unique_bidder_count)) {
            throw new InvalidArgumentException('non-nullable unique_bidder_count cannot be null');
        }
        $this->container['unique_bidder_count'] = $unique_bidder_count;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return \eBay\Buy\Browse\Model\ConvertedAmount|null
     */
    public function getUnitPrice(): ?\eBay\Buy\Browse\Model\ConvertedAmount
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param \eBay\Buy\Browse\Model\ConvertedAmount|null $unit_price unit_price
     *
     * @return $this
     */
    public function setUnitPrice(?\eBay\Buy\Browse\Model\ConvertedAmount $unit_price): static
    {
        if (is_null($unit_price)) {
            throw new InvalidArgumentException('non-nullable unit_price cannot be null');
        }
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets unit_pricing_measure
     *
     * @return string|null
     */
    public function getUnitPricingMeasure(): ?string
    {
        return $this->container['unit_pricing_measure'];
    }

    /**
     * Sets unit_pricing_measure
     *
     * @param string|null $unit_pricing_measure The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item.  This helps buyers compare prices. <br><br>For example, the following tells the buyer that the item is 7.99 per 100 grams. <br><br><code>\"unitPricingMeasure\": \"100g\",<br> \"unitPrice\": {<br>&nbsp;&nbsp;\"value\": \"7.99\",<br>&nbsp;&nbsp;\"currency\": \"GBP\"</code>
     *
     * @return $this
     */
    public function setUnitPricingMeasure(?string $unit_pricing_measure): static
    {
        if (is_null($unit_pricing_measure)) {
            throw new InvalidArgumentException('non-nullable unit_pricing_measure cannot be null');
        }
        $this->container['unit_pricing_measure'] = $unit_pricing_measure;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return \eBay\Buy\Browse\Model\Error[]|null
     */
    public function getWarnings(): ?array
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param \eBay\Buy\Browse\Model\Error[]|null $warnings An array of warning messages. These types of errors do not prevent the method from executing but should be checked.
     *
     * @return $this
     */
    public function setWarnings(?array $warnings): static
    {
        if (is_null($warnings)) {
            throw new InvalidArgumentException('non-nullable warnings cannot be null');
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }

    /**
     * Gets watch_count
     *
     * @return int|null
     */
    public function getWatchCount(): ?int
    {
        return $this->container['watch_count'];
    }

    /**
     * Sets watch_count
     *
     * @param int|null $watch_count The number of users that have added the item to their watch list.<br><br><span class=\"tablenote\"> <strong>Note:</strong> This field is restricted to applications that have been granted permission to access this feature. You must submit an <a href=\"https://developer.ebay.com/my/support/tickets?tab=app-check \">App Check ticket</a> to request this access. In the App Check form, add a note to the <b>Application Title/Summary</b> and/or <b>Application Details</b> fields that you want access to Watch Count data in the Browse API.</span>
     *
     * @return $this
     */
    public function setWatchCount(?int $watch_count): static
    {
        if (is_null($watch_count)) {
            throw new InvalidArgumentException('non-nullable watch_count cannot be null');
        }
        $this->container['watch_count'] = $watch_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


