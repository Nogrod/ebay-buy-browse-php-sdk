<?php

/**
 * SearchPagedCollection
 *
 * PHP version 8.1
 *
 * @package  eBay\Buy\Browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Browse API
 *
 * The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.
 *
 * The version of the OpenAPI document: v1.20.3
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eBay\Buy\Browse\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use eBay\Buy\Browse\ObjectSerializer;

/**
 * SearchPagedCollection Class Doc Comment
 *
 * @description The type that defines the fields for a paginated result set. The response consists of 0 or more sequenced &lt;i&gt;pages&lt;/i&gt; where each page has 0 or more items.
 * @package  eBay\Buy\Browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class SearchPagedCollection implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'SearchPagedCollection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'auto_corrections' => '\eBay\Buy\Browse\Model\AutoCorrections',
        'href' => 'string',
        'item_summaries' => '\eBay\Buy\Browse\Model\ItemSummary[]',
        'limit' => 'int',
        'next' => 'string',
        'offset' => 'int',
        'prev' => 'string',
        'refinement' => '\eBay\Buy\Browse\Model\Refinement',
        'total' => 'int',
        'warnings' => '\eBay\Buy\Browse\Model\Error[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'auto_corrections' => null,
        'href' => null,
        'item_summaries' => null,
        'limit' => 'int32',
        'next' => null,
        'offset' => 'int32',
        'prev' => null,
        'refinement' => null,
        'total' => 'int32',
        'warnings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'auto_corrections' => false,
        'href' => false,
        'item_summaries' => false,
        'limit' => false,
        'next' => false,
        'offset' => false,
        'prev' => false,
        'refinement' => false,
        'total' => false,
        'warnings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'auto_corrections' => 'autoCorrections',
        'href' => 'href',
        'item_summaries' => 'itemSummaries',
        'limit' => 'limit',
        'next' => 'next',
        'offset' => 'offset',
        'prev' => 'prev',
        'refinement' => 'refinement',
        'total' => 'total',
        'warnings' => 'warnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'auto_corrections' => 'setAutoCorrections',
        'href' => 'setHref',
        'item_summaries' => 'setItemSummaries',
        'limit' => 'setLimit',
        'next' => 'setNext',
        'offset' => 'setOffset',
        'prev' => 'setPrev',
        'refinement' => 'setRefinement',
        'total' => 'setTotal',
        'warnings' => 'setWarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'auto_corrections' => 'getAutoCorrections',
        'href' => 'getHref',
        'item_summaries' => 'getItemSummaries',
        'limit' => 'getLimit',
        'next' => 'getNext',
        'offset' => 'getOffset',
        'prev' => 'getPrev',
        'refinement' => 'getRefinement',
        'total' => 'getTotal',
        'warnings' => 'getWarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('auto_corrections', $data ?? [], null);
        $this->setIfExists('href', $data ?? [], null);
        $this->setIfExists('item_summaries', $data ?? [], null);
        $this->setIfExists('limit', $data ?? [], null);
        $this->setIfExists('next', $data ?? [], null);
        $this->setIfExists('offset', $data ?? [], null);
        $this->setIfExists('prev', $data ?? [], null);
        $this->setIfExists('refinement', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('warnings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_corrections
     *
     * @return \eBay\Buy\Browse\Model\AutoCorrections|null
     */
    public function getAutoCorrections(): ?\eBay\Buy\Browse\Model\AutoCorrections
    {
        return $this->container['auto_corrections'];
    }

    /**
     * Sets auto_corrections
     *
     * @param \eBay\Buy\Browse\Model\AutoCorrections|null $auto_corrections auto_corrections
     *
     * @return $this
     */
    public function setAutoCorrections(?\eBay\Buy\Browse\Model\AutoCorrections $auto_corrections): static
    {
        if (is_null($auto_corrections)) {
            throw new InvalidArgumentException('non-nullable auto_corrections cannot be null');
        }
        $this->container['auto_corrections'] = $auto_corrections;

        return $this;
    }

    /**
     * Gets href
     *
     * @return string|null
     */
    public function getHref(): ?string
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     *
     * @param string|null $href The URI of the current page of results.<br><br>The following example of the <b>search</b> method returns items 1 thru 5 from the list of items found.<pre>https://api.ebay.com/buy/v1/item_summary/search?q=shirt&limit=5&offset=0</pre>
     *
     * @return $this
     */
    public function setHref(?string $href): static
    {
        if (is_null($href)) {
            throw new InvalidArgumentException('non-nullable href cannot be null');
        }
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets item_summaries
     *
     * @return \eBay\Buy\Browse\Model\ItemSummary[]|null
     */
    public function getItemSummaries(): ?array
    {
        return $this->container['item_summaries'];
    }

    /**
     * Sets item_summaries
     *
     * @param \eBay\Buy\Browse\Model\ItemSummary[]|null $item_summaries An array of the items on this page. The items are sorted according to the sorting method specified in the request.
     *
     * @return $this
     */
    public function setItemSummaries(?array $item_summaries): static
    {
        if (is_null($item_summaries)) {
            throw new InvalidArgumentException('non-nullable item_summaries cannot be null');
        }
        $this->container['item_summaries'] = $item_summaries;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int|null
     */
    public function getLimit(): ?int
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int|null $limit The value of the <code>limit</code> parameter submitted in the request, which is the maximum number of items to return on a page, from the result set. A result set is the complete set of items returned by the method.
     *
     * @return $this
     */
    public function setLimit(?int $limit): static
    {
        if (is_null($limit)) {
            throw new InvalidArgumentException('non-nullable limit cannot be null');
        }
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets next
     *
     * @return string|null
     */
    public function getNext(): ?string
    {
        return $this->container['next'];
    }

    /**
     * Sets next
     *
     * @param string|null $next The URI for the next page of results. This value is returned if there is an additional page of results to return from the result set.<br><br>The following example of the <b>search</b> method returns items 5 thru 10 from the list of items found.<pre>https://api.ebay.com/buy/v1/item_summary/search?query=t-shirts&limit=5&offset=10</pre>
     *
     * @return $this
     */
    public function setNext(?string $next): static
    {
        if (is_null($next)) {
            throw new InvalidArgumentException('non-nullable next cannot be null');
        }
        $this->container['next'] = $next;

        return $this;
    }

    /**
     * Gets offset
     *
     * @return int|null
     */
    public function getOffset(): ?int
    {
        return $this->container['offset'];
    }

    /**
     * Sets offset
     *
     * @param int|null $offset This value indicates the <code>offset</code> used for current page of items being returned. Assume the initial request used an <code>offset</code> of <code>0</code> and a <code>limit</code> of <code>3</code>. Then in the first page of results, this value would be <code>0</code>, and items 1-3 are returned. For the second page, this value is <code>3</code> and so on.
     *
     * @return $this
     */
    public function setOffset(?int $offset): static
    {
        if (is_null($offset)) {
            throw new InvalidArgumentException('non-nullable offset cannot be null');
        }
        $this->container['offset'] = $offset;

        return $this;
    }

    /**
     * Gets prev
     *
     * @return string|null
     */
    public function getPrev(): ?string
    {
        return $this->container['prev'];
    }

    /**
     * Sets prev
     *
     * @param string|null $prev The URI for the previous page of results. This is returned if there is a previous page of results from the result set.<br><br>The following example of the <b>search</b> method returns items 1 thru 5 from the list of items found, which would be the first set of items returned.<pre>https://api.ebay.com/buy/v1/item_summary/search?query=t-shirts&limit=5&offset=0</pre>
     *
     * @return $this
     */
    public function setPrev(?string $prev): static
    {
        if (is_null($prev)) {
            throw new InvalidArgumentException('non-nullable prev cannot be null');
        }
        $this->container['prev'] = $prev;

        return $this;
    }

    /**
     * Gets refinement
     *
     * @return \eBay\Buy\Browse\Model\Refinement|null
     */
    public function getRefinement(): ?\eBay\Buy\Browse\Model\Refinement
    {
        return $this->container['refinement'];
    }

    /**
     * Sets refinement
     *
     * @param \eBay\Buy\Browse\Model\Refinement|null $refinement refinement
     *
     * @return $this
     */
    public function setRefinement(?\eBay\Buy\Browse\Model\Refinement $refinement): static
    {
        if (is_null($refinement)) {
            throw new InvalidArgumentException('non-nullable refinement cannot be null');
        }
        $this->container['refinement'] = $refinement;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int|null
     */
    public function getTotal(): ?int
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int|null $total The total number of items that match the input criteria.<br><br><span class=\"tablenote\"><b>Note:</b> <code>total</code> is just an indicator of the number of listings for a given query. It could vary based on the number of listings with variations included in the result. It is strongly recommended that <code>total</code> not be used in pagination use cases. Instead, use <a href=\"/api-docs/buy/browse/resources/item_summary/methods/search#response.next \">next</a> to determine the results on the next page.</span>
     *
     * @return $this
     */
    public function setTotal(?int $total): static
    {
        if (is_null($total)) {
            throw new InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return \eBay\Buy\Browse\Model\Error[]|null
     */
    public function getWarnings(): ?array
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param \eBay\Buy\Browse\Model\Error[]|null $warnings The container with all the warnings for the request.
     *
     * @return $this
     */
    public function setWarnings(?array $warnings): static
    {
        if (is_null($warnings)) {
            throw new InvalidArgumentException('non-nullable warnings cannot be null');
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


