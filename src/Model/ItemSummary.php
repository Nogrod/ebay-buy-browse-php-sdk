<?php
/**
 * ItemSummary
 *
 * PHP version 8.1
 *
 * @package  eBay\Buy\Browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Browse API
 *
 * The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.
 *
 * The version of the OpenAPI document: v1.20.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eBay\Buy\Browse\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use eBay\Buy\Browse\ObjectSerializer;

/**
 * ItemSummary Class Doc Comment
 *
 * @description The type that defines the fields for the details of a specific item.
 * @package  eBay\Buy\Browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ItemSummary implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ItemSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'additional_images' => '\eBay\Buy\Browse\Model\Image[]',
        'adult_only' => 'bool',
        'available_coupons' => 'bool',
        'bid_count' => 'int',
        'buying_options' => 'string[]',
        'categories' => '\eBay\Buy\Browse\Model\Category[]',
        'compatibility_match' => 'string',
        'compatibility_properties' => '\eBay\Buy\Browse\Model\CompatibilityProperty[]',
        'condition' => 'string',
        'condition_id' => 'string',
        'current_bid_price' => '\eBay\Buy\Browse\Model\ConvertedAmount',
        'distance_from_pickup_location' => '\eBay\Buy\Browse\Model\TargetLocation',
        'energy_efficiency_class' => 'string',
        'epid' => 'string',
        'image' => '\eBay\Buy\Browse\Model\Image',
        'item_affiliate_web_url' => 'string',
        'item_creation_date' => 'string',
        'item_end_date' => 'string',
        'item_group_href' => 'string',
        'item_group_type' => 'string',
        'item_href' => 'string',
        'item_id' => 'string',
        'item_location' => '\eBay\Buy\Browse\Model\ItemLocationImpl',
        'item_web_url' => 'string',
        'leaf_category_ids' => 'string[]',
        'legacy_item_id' => 'string',
        'listing_marketplace_id' => 'string',
        'marketing_price' => '\eBay\Buy\Browse\Model\MarketingPrice',
        'pickup_options' => '\eBay\Buy\Browse\Model\PickupOptionSummary[]',
        'price' => '\eBay\Buy\Browse\Model\ConvertedAmount',
        'price_display_condition' => 'string',
        'priority_listing' => 'bool',
        'qualified_programs' => 'string[]',
        'seller' => '\eBay\Buy\Browse\Model\Seller',
        'shipping_options' => '\eBay\Buy\Browse\Model\ShippingOptionSummary[]',
        'short_description' => 'string',
        'thumbnail_images' => '\eBay\Buy\Browse\Model\Image[]',
        'title' => 'string',
        'top_rated_buying_experience' => 'bool',
        'tyre_label_image_url' => 'string',
        'unit_price' => '\eBay\Buy\Browse\Model\ConvertedAmount',
        'unit_pricing_measure' => 'string',
        'watch_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'additional_images' => null,
        'adult_only' => null,
        'available_coupons' => null,
        'bid_count' => 'int32',
        'buying_options' => null,
        'categories' => null,
        'compatibility_match' => null,
        'compatibility_properties' => null,
        'condition' => null,
        'condition_id' => null,
        'current_bid_price' => null,
        'distance_from_pickup_location' => null,
        'energy_efficiency_class' => null,
        'epid' => null,
        'image' => null,
        'item_affiliate_web_url' => null,
        'item_creation_date' => null,
        'item_end_date' => null,
        'item_group_href' => null,
        'item_group_type' => null,
        'item_href' => null,
        'item_id' => null,
        'item_location' => null,
        'item_web_url' => null,
        'leaf_category_ids' => null,
        'legacy_item_id' => null,
        'listing_marketplace_id' => null,
        'marketing_price' => null,
        'pickup_options' => null,
        'price' => null,
        'price_display_condition' => null,
        'priority_listing' => null,
        'qualified_programs' => null,
        'seller' => null,
        'shipping_options' => null,
        'short_description' => null,
        'thumbnail_images' => null,
        'title' => null,
        'top_rated_buying_experience' => null,
        'tyre_label_image_url' => null,
        'unit_price' => null,
        'unit_pricing_measure' => null,
        'watch_count' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'additional_images' => false,
        'adult_only' => false,
        'available_coupons' => false,
        'bid_count' => false,
        'buying_options' => false,
        'categories' => false,
        'compatibility_match' => false,
        'compatibility_properties' => false,
        'condition' => false,
        'condition_id' => false,
        'current_bid_price' => false,
        'distance_from_pickup_location' => false,
        'energy_efficiency_class' => false,
        'epid' => false,
        'image' => false,
        'item_affiliate_web_url' => false,
        'item_creation_date' => false,
        'item_end_date' => false,
        'item_group_href' => false,
        'item_group_type' => false,
        'item_href' => false,
        'item_id' => false,
        'item_location' => false,
        'item_web_url' => false,
        'leaf_category_ids' => false,
        'legacy_item_id' => false,
        'listing_marketplace_id' => false,
        'marketing_price' => false,
        'pickup_options' => false,
        'price' => false,
        'price_display_condition' => false,
        'priority_listing' => false,
        'qualified_programs' => false,
        'seller' => false,
        'shipping_options' => false,
        'short_description' => false,
        'thumbnail_images' => false,
        'title' => false,
        'top_rated_buying_experience' => false,
        'tyre_label_image_url' => false,
        'unit_price' => false,
        'unit_pricing_measure' => false,
        'watch_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'additional_images' => 'additionalImages',
        'adult_only' => 'adultOnly',
        'available_coupons' => 'availableCoupons',
        'bid_count' => 'bidCount',
        'buying_options' => 'buyingOptions',
        'categories' => 'categories',
        'compatibility_match' => 'compatibilityMatch',
        'compatibility_properties' => 'compatibilityProperties',
        'condition' => 'condition',
        'condition_id' => 'conditionId',
        'current_bid_price' => 'currentBidPrice',
        'distance_from_pickup_location' => 'distanceFromPickupLocation',
        'energy_efficiency_class' => 'energyEfficiencyClass',
        'epid' => 'epid',
        'image' => 'image',
        'item_affiliate_web_url' => 'itemAffiliateWebUrl',
        'item_creation_date' => 'itemCreationDate',
        'item_end_date' => 'itemEndDate',
        'item_group_href' => 'itemGroupHref',
        'item_group_type' => 'itemGroupType',
        'item_href' => 'itemHref',
        'item_id' => 'itemId',
        'item_location' => 'itemLocation',
        'item_web_url' => 'itemWebUrl',
        'leaf_category_ids' => 'leafCategoryIds',
        'legacy_item_id' => 'legacyItemId',
        'listing_marketplace_id' => 'listingMarketplaceId',
        'marketing_price' => 'marketingPrice',
        'pickup_options' => 'pickupOptions',
        'price' => 'price',
        'price_display_condition' => 'priceDisplayCondition',
        'priority_listing' => 'priorityListing',
        'qualified_programs' => 'qualifiedPrograms',
        'seller' => 'seller',
        'shipping_options' => 'shippingOptions',
        'short_description' => 'shortDescription',
        'thumbnail_images' => 'thumbnailImages',
        'title' => 'title',
        'top_rated_buying_experience' => 'topRatedBuyingExperience',
        'tyre_label_image_url' => 'tyreLabelImageUrl',
        'unit_price' => 'unitPrice',
        'unit_pricing_measure' => 'unitPricingMeasure',
        'watch_count' => 'watchCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'additional_images' => 'setAdditionalImages',
        'adult_only' => 'setAdultOnly',
        'available_coupons' => 'setAvailableCoupons',
        'bid_count' => 'setBidCount',
        'buying_options' => 'setBuyingOptions',
        'categories' => 'setCategories',
        'compatibility_match' => 'setCompatibilityMatch',
        'compatibility_properties' => 'setCompatibilityProperties',
        'condition' => 'setCondition',
        'condition_id' => 'setConditionId',
        'current_bid_price' => 'setCurrentBidPrice',
        'distance_from_pickup_location' => 'setDistanceFromPickupLocation',
        'energy_efficiency_class' => 'setEnergyEfficiencyClass',
        'epid' => 'setEpid',
        'image' => 'setImage',
        'item_affiliate_web_url' => 'setItemAffiliateWebUrl',
        'item_creation_date' => 'setItemCreationDate',
        'item_end_date' => 'setItemEndDate',
        'item_group_href' => 'setItemGroupHref',
        'item_group_type' => 'setItemGroupType',
        'item_href' => 'setItemHref',
        'item_id' => 'setItemId',
        'item_location' => 'setItemLocation',
        'item_web_url' => 'setItemWebUrl',
        'leaf_category_ids' => 'setLeafCategoryIds',
        'legacy_item_id' => 'setLegacyItemId',
        'listing_marketplace_id' => 'setListingMarketplaceId',
        'marketing_price' => 'setMarketingPrice',
        'pickup_options' => 'setPickupOptions',
        'price' => 'setPrice',
        'price_display_condition' => 'setPriceDisplayCondition',
        'priority_listing' => 'setPriorityListing',
        'qualified_programs' => 'setQualifiedPrograms',
        'seller' => 'setSeller',
        'shipping_options' => 'setShippingOptions',
        'short_description' => 'setShortDescription',
        'thumbnail_images' => 'setThumbnailImages',
        'title' => 'setTitle',
        'top_rated_buying_experience' => 'setTopRatedBuyingExperience',
        'tyre_label_image_url' => 'setTyreLabelImageUrl',
        'unit_price' => 'setUnitPrice',
        'unit_pricing_measure' => 'setUnitPricingMeasure',
        'watch_count' => 'setWatchCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'additional_images' => 'getAdditionalImages',
        'adult_only' => 'getAdultOnly',
        'available_coupons' => 'getAvailableCoupons',
        'bid_count' => 'getBidCount',
        'buying_options' => 'getBuyingOptions',
        'categories' => 'getCategories',
        'compatibility_match' => 'getCompatibilityMatch',
        'compatibility_properties' => 'getCompatibilityProperties',
        'condition' => 'getCondition',
        'condition_id' => 'getConditionId',
        'current_bid_price' => 'getCurrentBidPrice',
        'distance_from_pickup_location' => 'getDistanceFromPickupLocation',
        'energy_efficiency_class' => 'getEnergyEfficiencyClass',
        'epid' => 'getEpid',
        'image' => 'getImage',
        'item_affiliate_web_url' => 'getItemAffiliateWebUrl',
        'item_creation_date' => 'getItemCreationDate',
        'item_end_date' => 'getItemEndDate',
        'item_group_href' => 'getItemGroupHref',
        'item_group_type' => 'getItemGroupType',
        'item_href' => 'getItemHref',
        'item_id' => 'getItemId',
        'item_location' => 'getItemLocation',
        'item_web_url' => 'getItemWebUrl',
        'leaf_category_ids' => 'getLeafCategoryIds',
        'legacy_item_id' => 'getLegacyItemId',
        'listing_marketplace_id' => 'getListingMarketplaceId',
        'marketing_price' => 'getMarketingPrice',
        'pickup_options' => 'getPickupOptions',
        'price' => 'getPrice',
        'price_display_condition' => 'getPriceDisplayCondition',
        'priority_listing' => 'getPriorityListing',
        'qualified_programs' => 'getQualifiedPrograms',
        'seller' => 'getSeller',
        'shipping_options' => 'getShippingOptions',
        'short_description' => 'getShortDescription',
        'thumbnail_images' => 'getThumbnailImages',
        'title' => 'getTitle',
        'top_rated_buying_experience' => 'getTopRatedBuyingExperience',
        'tyre_label_image_url' => 'getTyreLabelImageUrl',
        'unit_price' => 'getUnitPrice',
        'unit_pricing_measure' => 'getUnitPricingMeasure',
        'watch_count' => 'getWatchCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('additional_images', $data ?? [], null);
        $this->setIfExists('adult_only', $data ?? [], null);
        $this->setIfExists('available_coupons', $data ?? [], null);
        $this->setIfExists('bid_count', $data ?? [], null);
        $this->setIfExists('buying_options', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('compatibility_match', $data ?? [], null);
        $this->setIfExists('compatibility_properties', $data ?? [], null);
        $this->setIfExists('condition', $data ?? [], null);
        $this->setIfExists('condition_id', $data ?? [], null);
        $this->setIfExists('current_bid_price', $data ?? [], null);
        $this->setIfExists('distance_from_pickup_location', $data ?? [], null);
        $this->setIfExists('energy_efficiency_class', $data ?? [], null);
        $this->setIfExists('epid', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('item_affiliate_web_url', $data ?? [], null);
        $this->setIfExists('item_creation_date', $data ?? [], null);
        $this->setIfExists('item_end_date', $data ?? [], null);
        $this->setIfExists('item_group_href', $data ?? [], null);
        $this->setIfExists('item_group_type', $data ?? [], null);
        $this->setIfExists('item_href', $data ?? [], null);
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('item_location', $data ?? [], null);
        $this->setIfExists('item_web_url', $data ?? [], null);
        $this->setIfExists('leaf_category_ids', $data ?? [], null);
        $this->setIfExists('legacy_item_id', $data ?? [], null);
        $this->setIfExists('listing_marketplace_id', $data ?? [], null);
        $this->setIfExists('marketing_price', $data ?? [], null);
        $this->setIfExists('pickup_options', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('price_display_condition', $data ?? [], null);
        $this->setIfExists('priority_listing', $data ?? [], null);
        $this->setIfExists('qualified_programs', $data ?? [], null);
        $this->setIfExists('seller', $data ?? [], null);
        $this->setIfExists('shipping_options', $data ?? [], null);
        $this->setIfExists('short_description', $data ?? [], null);
        $this->setIfExists('thumbnail_images', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('top_rated_buying_experience', $data ?? [], null);
        $this->setIfExists('tyre_label_image_url', $data ?? [], null);
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('unit_pricing_measure', $data ?? [], null);
        $this->setIfExists('watch_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_images
     *
     * @return \eBay\Buy\Browse\Model\Image[]|null
     */
    public function getAdditionalImages(): ?array
    {
        return $this->container['additional_images'];
    }

    /**
     * Sets additional_images
     *
     * @param \eBay\Buy\Browse\Model\Image[]|null $additional_images An array of containers with the URLs for the images that are in addition to the primary image. The primary image is returned in the <code>image.imageUrl</code> field.
     *
     * @return $this
     */
    public function setAdditionalImages(?array $additional_images): static
    {
        if (is_null($additional_images)) {
            throw new InvalidArgumentException('non-nullable additional_images cannot be null');
        }
        $this->container['additional_images'] = $additional_images;

        return $this;
    }

    /**
     * Gets adult_only
     *
     * @return bool|null
     */
    public function getAdultOnly(): ?bool
    {
        return $this->container['adult_only'];
    }

    /**
     * Sets adult_only
     *
     * @param bool|null $adult_only This indicates if the item is for adults only. For more information about adult-only items on eBay, refer to the <a href=\"https://www.ebay.com/help/policies/prohibited-restricted-items/adult-items-policy?id=4278 \" target=\"_blank\">Adult items policy</a>.
     *
     * @return $this
     */
    public function setAdultOnly(?bool $adult_only): static
    {
        if (is_null($adult_only)) {
            throw new InvalidArgumentException('non-nullable adult_only cannot be null');
        }
        $this->container['adult_only'] = $adult_only;

        return $this;
    }

    /**
     * Gets available_coupons
     *
     * @return bool|null
     */
    public function getAvailableCoupons(): ?bool
    {
        return $this->container['available_coupons'];
    }

    /**
     * Sets available_coupons
     *
     * @param bool|null $available_coupons This boolean attribute indicates if coupons are available for the item.<br><br><span class=\"tablenote\"><b>Note:</b> The Browse API only acknowledges item-level coupons. This field will only be returned as true if a coupon is linked with an item. It does not recognize store-level coupons offered by sellers across their entire store.</span>
     *
     * @return $this
     */
    public function setAvailableCoupons(?bool $available_coupons): static
    {
        if (is_null($available_coupons)) {
            throw new InvalidArgumentException('non-nullable available_coupons cannot be null');
        }
        $this->container['available_coupons'] = $available_coupons;

        return $this;
    }

    /**
     * Gets bid_count
     *
     * @return int|null
     */
    public function getBidCount(): ?int
    {
        return $this->container['bid_count'];
    }

    /**
     * Sets bid_count
     *
     * @param int|null $bid_count This integer value indicates the total number of bids that have been placed for an auction item. This field is only returned for auction items.
     *
     * @return $this
     */
    public function setBidCount(?int $bid_count): static
    {
        if (is_null($bid_count)) {
            throw new InvalidArgumentException('non-nullable bid_count cannot be null');
        }
        $this->container['bid_count'] = $bid_count;

        return $this;
    }

    /**
     * Gets buying_options
     *
     * @return string[]|null
     */
    public function getBuyingOptions(): ?array
    {
        return $this->container['buying_options'];
    }

    /**
     * Sets buying_options
     *
     * @param string[]|null $buying_options A comma separated list of all the purchase options available for the item.<br><br><b>Values Returned:</b><ul><li><code>FIXED_PRICE</code><br>Indicates the buyer can purchase the item for a set price using the <i>Buy It Now</i> button.</li><li><code>AUCTION</code><br>Indicates the buyer can place a bid for the item. After the first bid is placed, this becomes a live auction item and is the only buying option for this item.</li><li><code>BEST_OFFER</code><br>Items where the buyer can send the seller a price they are willing to pay for the item. The seller can accept, reject, or send a counter offer. For additional information about Best Offer, refer to <a href=\"https://www.ebay.com/help/selling/listings/selling-buy-now/adding-best-offer-listing?id=4144 \" target=\"_blank\">Adding Best Offer to your listing and sending offers to buyers</a>.</li><li><code>CLASSIFIED_AD</code><br>Indicates that the final sales transaction is to be completed outside of the eBay environment.</li></ul>
     *
     * @return $this
     */
    public function setBuyingOptions(?array $buying_options): static
    {
        if (is_null($buying_options)) {
            throw new InvalidArgumentException('non-nullable buying_options cannot be null');
        }
        $this->container['buying_options'] = $buying_options;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \eBay\Buy\Browse\Model\Category[]|null
     */
    public function getCategories(): ?array
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \eBay\Buy\Browse\Model\Category[]|null $categories This array returns the name and ID of each category associated with the item, including top level, branch, and leaf categories.
     *
     * @return $this
     */
    public function setCategories(?array $categories): static
    {
        if (is_null($categories)) {
            throw new InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets compatibility_match
     *
     * @return string|null
     */
    public function getCompatibilityMatch(): ?string
    {
        return $this->container['compatibility_match'];
    }

    /**
     * Sets compatibility_match
     *
     * @param string|null $compatibility_match This indicates how well an item matches the <code>compatibility_filter</code> product attributes.<br><br><b>Valid Values:</b><ul><li><code>EXACT</code></li><li><code>POSSIBLE</li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:CompatibilityMatchEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setCompatibilityMatch(?string $compatibility_match): static
    {
        if (is_null($compatibility_match)) {
            throw new InvalidArgumentException('non-nullable compatibility_match cannot be null');
        }
        $this->container['compatibility_match'] = $compatibility_match;

        return $this;
    }

    /**
     * Gets compatibility_properties
     *
     * @return \eBay\Buy\Browse\Model\CompatibilityProperty[]|null
     */
    public function getCompatibilityProperties(): ?array
    {
        return $this->container['compatibility_properties'];
    }

    /**
     * Sets compatibility_properties
     *
     * @param \eBay\Buy\Browse\Model\CompatibilityProperty[]|null $compatibility_properties This container returns only the product attributes that are compatible with the item. These attributes were specified in the <code>compatibility_filter</code> in the request. This means that if you passed in 5 attributes and only 4 are compatible, only those 4 are returned. If none of the attributes are compatible, this container is not returned.
     *
     * @return $this
     */
    public function setCompatibilityProperties(?array $compatibility_properties): static
    {
        if (is_null($compatibility_properties)) {
            throw new InvalidArgumentException('non-nullable compatibility_properties cannot be null');
        }
        $this->container['compatibility_properties'] = $compatibility_properties;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string|null
     */
    public function getCondition(): ?string
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string|null $condition The text describing the condition of the item, such as <b>New</b> or <b>Used</b>. For a list of condition names, refer to <a href=\"/api-docs/sell/static/metadata/condition-id-values.html \" target=\"_blank\">Item Condition IDs and Names</a>.
     *
     * @return $this
     */
    public function setCondition(?string $condition): static
    {
        if (is_null($condition)) {
            throw new InvalidArgumentException('non-nullable condition cannot be null');
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets condition_id
     *
     * @return string|null
     */
    public function getConditionId(): ?string
    {
        return $this->container['condition_id'];
    }

    /**
     * Sets condition_id
     *
     * @param string|null $condition_id The identifier of the condition of the item. For example, <code>1000</code> is the identifier for <code>NEW</code>. For a list of condition names and IDs, refer to <a href=\"/api-docs/sell/static/metadata/condition-id-values.html \" target=\"_blank\">Item Condition IDs and Names</a>.
     *
     * @return $this
     */
    public function setConditionId(?string $condition_id): static
    {
        if (is_null($condition_id)) {
            throw new InvalidArgumentException('non-nullable condition_id cannot be null');
        }
        $this->container['condition_id'] = $condition_id;

        return $this;
    }

    /**
     * Gets current_bid_price
     *
     * @return \eBay\Buy\Browse\Model\ConvertedAmount|null
     */
    public function getCurrentBidPrice(): ?\eBay\Buy\Browse\Model\ConvertedAmount
    {
        return $this->container['current_bid_price'];
    }

    /**
     * Sets current_bid_price
     *
     * @param \eBay\Buy\Browse\Model\ConvertedAmount|null $current_bid_price current_bid_price
     *
     * @return $this
     */
    public function setCurrentBidPrice(?\eBay\Buy\Browse\Model\ConvertedAmount $current_bid_price): static
    {
        if (is_null($current_bid_price)) {
            throw new InvalidArgumentException('non-nullable current_bid_price cannot be null');
        }
        $this->container['current_bid_price'] = $current_bid_price;

        return $this;
    }

    /**
     * Gets distance_from_pickup_location
     *
     * @return \eBay\Buy\Browse\Model\TargetLocation|null
     */
    public function getDistanceFromPickupLocation(): ?\eBay\Buy\Browse\Model\TargetLocation
    {
        return $this->container['distance_from_pickup_location'];
    }

    /**
     * Sets distance_from_pickup_location
     *
     * @param \eBay\Buy\Browse\Model\TargetLocation|null $distance_from_pickup_location distance_from_pickup_location
     *
     * @return $this
     */
    public function setDistanceFromPickupLocation(?\eBay\Buy\Browse\Model\TargetLocation $distance_from_pickup_location): static
    {
        if (is_null($distance_from_pickup_location)) {
            throw new InvalidArgumentException('non-nullable distance_from_pickup_location cannot be null');
        }
        $this->container['distance_from_pickup_location'] = $distance_from_pickup_location;

        return $this;
    }

    /**
     * Gets energy_efficiency_class
     *
     * @return string|null
     */
    public function getEnergyEfficiencyClass(): ?string
    {
        return $this->container['energy_efficiency_class'];
    }

    /**
     * Sets energy_efficiency_class
     *
     * @param string|null $energy_efficiency_class This indicates the <a href=\"https://en.wikipedia.org/wiki/European_Union_energy_label \" target=\"_blank\">European energy efficiency</a> rating (EEK) of the item. Energy efficiency ratings apply to products listed by commercial vendors in electronics categories only. <br><br>Currently, this field is only applicable for the Germany site, and is returned only if the seller specifies the energy efficiency rating through item specifics at listing time. Rating values include <code>A+++</code>, <code>A++</code>, <code>A+</code>, <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>, <code>E</code>, <code>F</code>, and <code>G</code>.
     *
     * @return $this
     */
    public function setEnergyEfficiencyClass(?string $energy_efficiency_class): static
    {
        if (is_null($energy_efficiency_class)) {
            throw new InvalidArgumentException('non-nullable energy_efficiency_class cannot be null');
        }
        $this->container['energy_efficiency_class'] = $energy_efficiency_class;

        return $this;
    }

    /**
     * Gets epid
     *
     * @return string|null
     */
    public function getEpid(): ?string
    {
        return $this->container['epid'];
    }

    /**
     * Sets epid
     *
     * @param string|null $epid An ePID is the eBay product identifier of a product from the eBay product catalog.  This indicates the product in which the item belongs.
     *
     * @return $this
     */
    public function setEpid(?string $epid): static
    {
        if (is_null($epid)) {
            throw new InvalidArgumentException('non-nullable epid cannot be null');
        }
        $this->container['epid'] = $epid;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \eBay\Buy\Browse\Model\Image|null
     */
    public function getImage(): ?\eBay\Buy\Browse\Model\Image
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \eBay\Buy\Browse\Model\Image|null $image image
     *
     * @return $this
     */
    public function setImage(?\eBay\Buy\Browse\Model\Image $image): static
    {
        if (is_null($image)) {
            throw new InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets item_affiliate_web_url
     *
     * @return string|null
     */
    public function getItemAffiliateWebUrl(): ?string
    {
        return $this->container['item_affiliate_web_url'];
    }

    /**
     * Sets item_affiliate_web_url
     *
     * @param string|null $item_affiliate_web_url The URL to the View Item page of the item which includes the affiliate tracking ID.<br><br><span class=\"tablenote\"><b>Note:</b> In order to receive commissions on sales, eBay Partner Network affiliates must use this URL to forward buyers to the listing on the eBay marketplace.</span><br>The <code>itemAffiliateWebUrl</code> is returned only if:<ul><li>The marketplace through which the item is being viewed is part of the eBay Partner Network. Currently Singapore (<code>EBAY_SG</code>) is <b>not</b> supported.<br><br>For additional information, refer to <a href=\"https://partnerhelp.ebay.com/helpcenter/s/article/countries-available-as-a-program-in-EPN?language=en_US \" target=\"_blank\">eBay Partner Network</a>.</li><li>The seller enables affiliate tracking for the item by including the <code><a href=\"/api-docs/buy/static/api-browse.html#Headers\">X-EBAY-C-ENDUSERCTX</a></code> request header in the method.</li></ul>
     *
     * @return $this
     */
    public function setItemAffiliateWebUrl(?string $item_affiliate_web_url): static
    {
        if (is_null($item_affiliate_web_url)) {
            throw new InvalidArgumentException('non-nullable item_affiliate_web_url cannot be null');
        }
        $this->container['item_affiliate_web_url'] = $item_affiliate_web_url;

        return $this;
    }

    /**
     * Gets item_creation_date
     *
     * @return string|null
     */
    public function getItemCreationDate(): ?string
    {
        return $this->container['item_creation_date'];
    }

    /**
     * Sets item_creation_date
     *
     * @param string|null $item_creation_date The date and time when the item listing was created. This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer.
     *
     * @return $this
     */
    public function setItemCreationDate(?string $item_creation_date): static
    {
        if (is_null($item_creation_date)) {
            throw new InvalidArgumentException('non-nullable item_creation_date cannot be null');
        }
        $this->container['item_creation_date'] = $item_creation_date;

        return $this;
    }

    /**
     * Gets item_end_date
     *
     * @return string|null
     */
    public function getItemEndDate(): ?string
    {
        return $this->container['item_end_date'];
    }

    /**
     * Sets item_end_date
     *
     * @param string|null $item_end_date A timestamp that indicates the date and time an auction listing will end.<br><br>This value is returned in UTC format (<code>yyyy-MM-ddThh:mm:ss.sssZ</code>), which can be converted into the local time of the buyer.
     *
     * @return $this
     */
    public function setItemEndDate(?string $item_end_date): static
    {
        if (is_null($item_end_date)) {
            throw new InvalidArgumentException('non-nullable item_end_date cannot be null');
        }
        $this->container['item_end_date'] = $item_end_date;

        return $this;
    }

    /**
     * Gets item_group_href
     *
     * @return string|null
     */
    public function getItemGroupHref(): ?string
    {
        return $this->container['item_group_href'];
    }

    /**
     * Sets item_group_href
     *
     * @param string|null $item_group_href The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.<br><br><span class=\"tablenote\"><b>Note:</b> This field is returned only for item groups.</span>
     *
     * @return $this
     */
    public function setItemGroupHref(?string $item_group_href): static
    {
        if (is_null($item_group_href)) {
            throw new InvalidArgumentException('non-nullable item_group_href cannot be null');
        }
        $this->container['item_group_href'] = $item_group_href;

        return $this;
    }

    /**
     * Gets item_group_type
     *
     * @return string|null
     */
    public function getItemGroupType(): ?string
    {
        return $this->container['item_group_type'];
    }

    /**
     * Sets item_group_type
     *
     * @param string|null $item_group_type The indicates the item group type. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. <br><br>Currently only the <code>SELLER_DEFINED_VARIATIONS</code> is supported and indicates this is an item group created by the seller.<br><br><span class=\"tablenote\"><b>Note:</b> This field is returned only for item groups.</span>
     *
     * @return $this
     */
    public function setItemGroupType(?string $item_group_type): static
    {
        if (is_null($item_group_type)) {
            throw new InvalidArgumentException('non-nullable item_group_type cannot be null');
        }
        $this->container['item_group_type'] = $item_group_type;

        return $this;
    }

    /**
     * Gets item_href
     *
     * @return string|null
     */
    public function getItemHref(): ?string
    {
        return $this->container['item_href'];
    }

    /**
     * Sets item_href
     *
     * @param string|null $item_href The URI for the Browse API <a href=\"/api-docs/buy/browse/resources/item/methods/getItem\" target=\"_blank\">getItem</a> method, which can be used to retrieve more details about items in the search results.
     *
     * @return $this
     */
    public function setItemHref(?string $item_href): static
    {
        if (is_null($item_href)) {
            throw new InvalidArgumentException('non-nullable item_href cannot be null');
        }
        $this->container['item_href'] = $item_href;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return string|null
     */
    public function getItemId(): ?string
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string|null $item_id The unique RESTful identifier of the item.
     *
     * @return $this
     */
    public function setItemId(?string $item_id): static
    {
        if (is_null($item_id)) {
            throw new InvalidArgumentException('non-nullable item_id cannot be null');
        }
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets item_location
     *
     * @return \eBay\Buy\Browse\Model\ItemLocationImpl|null
     */
    public function getItemLocation(): ?\eBay\Buy\Browse\Model\ItemLocationImpl
    {
        return $this->container['item_location'];
    }

    /**
     * Sets item_location
     *
     * @param \eBay\Buy\Browse\Model\ItemLocationImpl|null $item_location item_location
     *
     * @return $this
     */
    public function setItemLocation(?\eBay\Buy\Browse\Model\ItemLocationImpl $item_location): static
    {
        if (is_null($item_location)) {
            throw new InvalidArgumentException('non-nullable item_location cannot be null');
        }
        $this->container['item_location'] = $item_location;

        return $this;
    }

    /**
     * Gets item_web_url
     *
     * @return string|null
     */
    public function getItemWebUrl(): ?string
    {
        return $this->container['item_web_url'];
    }

    /**
     * Sets item_web_url
     *
     * @param string|null $item_web_url The URL to the View Item page of the item. This enables you to include a \"Report Item on eBay\" hyperlink that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.
     *
     * @return $this
     */
    public function setItemWebUrl(?string $item_web_url): static
    {
        if (is_null($item_web_url)) {
            throw new InvalidArgumentException('non-nullable item_web_url cannot be null');
        }
        $this->container['item_web_url'] = $item_web_url;

        return $this;
    }

    /**
     * Gets leaf_category_ids
     *
     * @return string[]|null
     */
    public function getLeafCategoryIds(): ?array
    {
        return $this->container['leaf_category_ids'];
    }

    /**
     * Sets leaf_category_ids
     *
     * @param string[]|null $leaf_category_ids The leaf category IDs of the item. When the item belongs to two leaf categories, the ID values are returned in the order primary, secondary.
     *
     * @return $this
     */
    public function setLeafCategoryIds(?array $leaf_category_ids): static
    {
        if (is_null($leaf_category_ids)) {
            throw new InvalidArgumentException('non-nullable leaf_category_ids cannot be null');
        }
        $this->container['leaf_category_ids'] = $leaf_category_ids;

        return $this;
    }

    /**
     * Gets legacy_item_id
     *
     * @return string|null
     */
    public function getLegacyItemId(): ?string
    {
        return $this->container['legacy_item_id'];
    }

    /**
     * Sets legacy_item_id
     *
     * @param string|null $legacy_item_id The unique identifier of the eBay listing that contains the item. This is the traditional/legacy ID that is often seen in the URL of the listing View Item page.
     *
     * @return $this
     */
    public function setLegacyItemId(?string $legacy_item_id): static
    {
        if (is_null($legacy_item_id)) {
            throw new InvalidArgumentException('non-nullable legacy_item_id cannot be null');
        }
        $this->container['legacy_item_id'] = $legacy_item_id;

        return $this;
    }

    /**
     * Gets listing_marketplace_id
     *
     * @return string|null
     */
    public function getListingMarketplaceId(): ?string
    {
        return $this->container['listing_marketplace_id'];
    }

    /**
     * Sets listing_marketplace_id
     *
     * @param string|null $listing_marketplace_id The ID of the eBay marketplace on which the seller listed the item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setListingMarketplaceId(?string $listing_marketplace_id): static
    {
        if (is_null($listing_marketplace_id)) {
            throw new InvalidArgumentException('non-nullable listing_marketplace_id cannot be null');
        }
        $this->container['listing_marketplace_id'] = $listing_marketplace_id;

        return $this;
    }

    /**
     * Gets marketing_price
     *
     * @return \eBay\Buy\Browse\Model\MarketingPrice|null
     */
    public function getMarketingPrice(): ?\eBay\Buy\Browse\Model\MarketingPrice
    {
        return $this->container['marketing_price'];
    }

    /**
     * Sets marketing_price
     *
     * @param \eBay\Buy\Browse\Model\MarketingPrice|null $marketing_price marketing_price
     *
     * @return $this
     */
    public function setMarketingPrice(?\eBay\Buy\Browse\Model\MarketingPrice $marketing_price): static
    {
        if (is_null($marketing_price)) {
            throw new InvalidArgumentException('non-nullable marketing_price cannot be null');
        }
        $this->container['marketing_price'] = $marketing_price;

        return $this;
    }

    /**
     * Gets pickup_options
     *
     * @return \eBay\Buy\Browse\Model\PickupOptionSummary[]|null
     */
    public function getPickupOptions(): ?array
    {
        return $this->container['pickup_options'];
    }

    /**
     * Sets pickup_options
     *
     * @param \eBay\Buy\Browse\Model\PickupOptionSummary[]|null $pickup_options This container returns the local pickup options available to the buyer. This container is returned only if the user is searching for local pickup items and set the local pickup filters in the method request.
     *
     * @return $this
     */
    public function setPickupOptions(?array $pickup_options): static
    {
        if (is_null($pickup_options)) {
            throw new InvalidArgumentException('non-nullable pickup_options cannot be null');
        }
        $this->container['pickup_options'] = $pickup_options;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \eBay\Buy\Browse\Model\ConvertedAmount|null
     */
    public function getPrice(): ?\eBay\Buy\Browse\Model\ConvertedAmount
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \eBay\Buy\Browse\Model\ConvertedAmount|null $price price
     *
     * @return $this
     */
    public function setPrice(?\eBay\Buy\Browse\Model\ConvertedAmount $price): static
    {
        if (is_null($price)) {
            throw new InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_display_condition
     *
     * @return string|null
     */
    public function getPriceDisplayCondition(): ?string
    {
        return $this->container['price_display_condition'];
    }

    /**
     * Sets price_display_condition
     *
     * @param string|null $price_display_condition Indicates when in the buying flow the item's price can appear for minimum advertised price (MAP) items, which is the lowest price a retailer can advertise/show for this item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PriceDisplayConditionEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setPriceDisplayCondition(?string $price_display_condition): static
    {
        if (is_null($price_display_condition)) {
            throw new InvalidArgumentException('non-nullable price_display_condition cannot be null');
        }
        $this->container['price_display_condition'] = $price_display_condition;

        return $this;
    }

    /**
     * Gets priority_listing
     *
     * @return bool|null
     */
    public function getPriorityListing(): ?bool
    {
        return $this->container['priority_listing'];
    }

    /**
     * Sets priority_listing
     *
     * @param bool|null $priority_listing This field is returned as <code>true</code> if the listing is part of a Promoted Listing campaign. Promoted Listings are available to <b>Above Standard</b> and <b>Top Rated</b> sellers with recent sales activity.<br><br><span class=\"tablenote\"><b>Note:</b> Priority Listing is returned only with a Best Match sort and will not be returned for other sort options.</span>
     *
     * @return $this
     */
    public function setPriorityListing(?bool $priority_listing): static
    {
        if (is_null($priority_listing)) {
            throw new InvalidArgumentException('non-nullable priority_listing cannot be null');
        }
        $this->container['priority_listing'] = $priority_listing;

        return $this;
    }

    /**
     * Gets qualified_programs
     *
     * @return string[]|null
     */
    public function getQualifiedPrograms(): ?array
    {
        return $this->container['qualified_programs'];
    }

    /**
     * Sets qualified_programs
     *
     * @param string[]|null $qualified_programs An array of the qualified programs available for the item, such as <code>EBAY_PLUS</code>, <code>AUTHENTICITY_GUARANTEE</code>, and <code>AUTHENTICITY_VERIFICATION</code>.<br><br>eBay Plus is a premium account option for buyers, which provides benefits such as fast, free domestic shipping and free returns on selected items. Top-Rated eBay sellers must opt in to eBay Plus to be able to offer the program on qualifying listings. Sellers must commit to next-day delivery of those items.<br><br><span class=\"tablenote\"><b>Note: </b> eBay Plus is available only to buyers in the Germany, Austria, and Australia marketplaces.</span><br><br>The eBay <a href=\"https://pages.ebay.com/authenticity-guarantee/ \" target=\"_blank\">Authenticity Guarantee</a> program enables third-party authenticators to perform authentication verification inspections on items such as watches and sneakers.
     *
     * @return $this
     */
    public function setQualifiedPrograms(?array $qualified_programs): static
    {
        if (is_null($qualified_programs)) {
            throw new InvalidArgumentException('non-nullable qualified_programs cannot be null');
        }
        $this->container['qualified_programs'] = $qualified_programs;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return \eBay\Buy\Browse\Model\Seller|null
     */
    public function getSeller(): ?\eBay\Buy\Browse\Model\Seller
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param \eBay\Buy\Browse\Model\Seller|null $seller seller
     *
     * @return $this
     */
    public function setSeller(?\eBay\Buy\Browse\Model\Seller $seller): static
    {
        if (is_null($seller)) {
            throw new InvalidArgumentException('non-nullable seller cannot be null');
        }
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets shipping_options
     *
     * @return \eBay\Buy\Browse\Model\ShippingOptionSummary[]|null
     */
    public function getShippingOptions(): ?array
    {
        return $this->container['shipping_options'];
    }

    /**
     * Sets shipping_options
     *
     * @param \eBay\Buy\Browse\Model\ShippingOptionSummary[]|null $shipping_options This container returns the shipping options available to ship the item.
     *
     * @return $this
     */
    public function setShippingOptions(?array $shipping_options): static
    {
        if (is_null($shipping_options)) {
            throw new InvalidArgumentException('non-nullable shipping_options cannot be null');
        }
        $this->container['shipping_options'] = $shipping_options;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string|null
     */
    public function getShortDescription(): ?string
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string|null $short_description This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.) Sometimes the title does not provide enough information but the description is too big. Surfacing the <code>shortDescription</code> can often provide buyers with the additional information that could help them make a buying decision.<br><br>For example:<pre>\"<b>title</b>\": \"Petrel U42W FPV Drone RC Quadcopter w/HD Camera Live Video One Key Off / Landing\",<br>\"<b>shortDescription</b>\": \"1 U42W Quadcopter. Syma X5SW-V3 Wifi FPV RC Drone Quadcopter 2.4Ghz 6-Axis Gyro with Headless Mode. Syma X20 Pocket Drone 2.4Ghz Mini RC Quadcopter Headless Mode Altitude Hold. One Key Take Off / Landing function: allow beginner to easy to fly the drone without any skill.\",</pre><br><b>Restriction:</b> This field is returned by the <b>search</b> method only when <code>fieldgroups</code> = <code>EXTENDED</code>.
     *
     * @return $this
     */
    public function setShortDescription(?string $short_description): static
    {
        if (is_null($short_description)) {
            throw new InvalidArgumentException('non-nullable short_description cannot be null');
        }
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets thumbnail_images
     *
     * @return \eBay\Buy\Browse\Model\Image[]|null
     */
    public function getThumbnailImages(): ?array
    {
        return $this->container['thumbnail_images'];
    }

    /**
     * Sets thumbnail_images
     *
     * @param \eBay\Buy\Browse\Model\Image[]|null $thumbnail_images An array of thumbnail images for the item.
     *
     * @return $this
     */
    public function setThumbnailImages(?array $thumbnail_images): static
    {
        if (is_null($thumbnail_images)) {
            throw new InvalidArgumentException('non-nullable thumbnail_images cannot be null');
        }
        $this->container['thumbnail_images'] = $thumbnail_images;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle(): ?string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The seller-created title of the item.<br><br><b>Maximum Length:</b> 80 characters
     *
     * @return $this
     */
    public function setTitle(?string $title): static
    {
        if (is_null($title)) {
            throw new InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets top_rated_buying_experience
     *
     * @return bool|null
     */
    public function getTopRatedBuyingExperience(): ?bool
    {
        return $this->container['top_rated_buying_experience'];
    }

    /**
     * Sets top_rated_buying_experience
     *
     * @param bool|null $top_rated_buying_experience This indicates if the item is a top-rated plus item. There are three benefits of a top-rated plus item: a  minimum 30-day money-back return policy; shipping the item in 1 business day with tracking provided; and the added comfort of knowing that this item is from an experienced seller with the highest buyer ratings. For more information, refer to <a href=\"https://pages.ebay.com/topratedplus/index.html \" target=\"_blank\">Look for Top Rated Plus Items</a> and <a href=\"https://www.ebay.com/help/selling/seller-levels-performance-standards/seller-levels-performance-standards?id=4080 \" target=\"_blank\">Seller performance overview</a>.
     *
     * @return $this
     */
    public function setTopRatedBuyingExperience(?bool $top_rated_buying_experience): static
    {
        if (is_null($top_rated_buying_experience)) {
            throw new InvalidArgumentException('non-nullable top_rated_buying_experience cannot be null');
        }
        $this->container['top_rated_buying_experience'] = $top_rated_buying_experience;

        return $this;
    }

    /**
     * Gets tyre_label_image_url
     *
     * @return string|null
     */
    public function getTyreLabelImageUrl(): ?string
    {
        return $this->container['tyre_label_image_url'];
    }

    /**
     * Sets tyre_label_image_url
     *
     * @param string|null $tyre_label_image_url The URL to the image that shows the information on the tyre label.
     *
     * @return $this
     */
    public function setTyreLabelImageUrl(?string $tyre_label_image_url): static
    {
        if (is_null($tyre_label_image_url)) {
            throw new InvalidArgumentException('non-nullable tyre_label_image_url cannot be null');
        }
        $this->container['tyre_label_image_url'] = $tyre_label_image_url;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return \eBay\Buy\Browse\Model\ConvertedAmount|null
     */
    public function getUnitPrice(): ?\eBay\Buy\Browse\Model\ConvertedAmount
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param \eBay\Buy\Browse\Model\ConvertedAmount|null $unit_price unit_price
     *
     * @return $this
     */
    public function setUnitPrice(?\eBay\Buy\Browse\Model\ConvertedAmount $unit_price): static
    {
        if (is_null($unit_price)) {
            throw new InvalidArgumentException('non-nullable unit_price cannot be null');
        }
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets unit_pricing_measure
     *
     * @return string|null
     */
    public function getUnitPricingMeasure(): ?string
    {
        return $this->container['unit_pricing_measure'];
    }

    /**
     * Sets unit_pricing_measure
     *
     * @param string|null $unit_pricing_measure The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices.<br><br>For example, the following tells the buyer that the item is 7.99 per 100 grams.<pre>\"unitPricingMeasure\": \"100g\",<br> \"unitPrice\": {<br>&nbsp;&nbsp;\"value\": \"7.99\",<br>&nbsp;&nbsp;\"currency\": \"GBP\"</pre>
     *
     * @return $this
     */
    public function setUnitPricingMeasure(?string $unit_pricing_measure): static
    {
        if (is_null($unit_pricing_measure)) {
            throw new InvalidArgumentException('non-nullable unit_pricing_measure cannot be null');
        }
        $this->container['unit_pricing_measure'] = $unit_pricing_measure;

        return $this;
    }

    /**
     * Gets watch_count
     *
     * @return int|null
     */
    public function getWatchCount(): ?int
    {
        return $this->container['watch_count'];
    }

    /**
     * Sets watch_count
     *
     * @param int|null $watch_count The number of users that have added the item to their watch list.<br><br><span class=\"tablenote\"><b>Note:</b> This field is restricted to applications that have been granted permission to access this feature. You must submit an <a href=\"/my/support/tickets?tab=app-check \" target=\"_blank\">App Check ticket</a> to request this access. In the App Check form, add a note to the <b>Application Title/Summary</b> and/or <b>Application Details</b> fields indicating that you want access to Watch Count data in the Browse API.</span>
     *
     * @return $this
     */
    public function setWatchCount(?int $watch_count): static
    {
        if (is_null($watch_count)) {
            throw new InvalidArgumentException('non-nullable watch_count cannot be null');
        }
        $this->container['watch_count'] = $watch_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


